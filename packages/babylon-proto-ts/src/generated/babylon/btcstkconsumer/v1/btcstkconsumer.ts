// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/btcstkconsumer/v1/btcstkconsumer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.btcstkconsumer.v1";

/** ConsumerType defines the type of consumer chain */
export enum ConsumerType {
  /** COSMOS - COSMOS represents a Cosmos SDK chain consumer */
  COSMOS = 0,
  /** ROLLUP - ROLLUP represents a rollup chain consumer */
  ROLLUP = 1,
  UNRECOGNIZED = -1,
}

export function consumerTypeFromJSON(object: any): ConsumerType {
  switch (object) {
    case 0:
    case "COSMOS":
      return ConsumerType.COSMOS;
    case 1:
    case "ROLLUP":
      return ConsumerType.ROLLUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsumerType.UNRECOGNIZED;
  }
}

export function consumerTypeToJSON(object: ConsumerType): string {
  switch (object) {
    case ConsumerType.COSMOS:
      return "COSMOS";
    case ConsumerType.ROLLUP:
      return "ROLLUP";
    case ConsumerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ConsumerRegister is the registration information of a consumer */
export interface ConsumerRegister {
  /**
   * consumer_id is the ID of the consumer
   * - for Cosmos SDK chains, the consumer ID will be the IBC client ID
   * - for rollup chains, the consumer ID will be the chain ID of the rollup
   *   chain
   */
  consumerId: string;
  /** consumer_name is the name of the consumer */
  consumerName: string;
  /** consumer_description is a description for the consumer (can be empty) */
  consumerDescription: string;
  cosmosConsumerMetadata?: CosmosConsumerMetadata | undefined;
  rollupConsumerMetadata?:
    | RollupConsumerMetadata
    | undefined;
  /**
   * babylon_rewards_commission is the commission rate that Babylon takes from rewards
   * distributed to finality providers for this BSN consumer
   */
  babylonRewardsCommission: string;
}

/** CosmosConsumerMetadata is the metadata for the Cosmos integration */
export interface CosmosConsumerMetadata {
  /** channel_id defines the IBC channel ID for the consumer chain */
  channelId: string;
}

/** RollupConsumerMetadata is the metadata for the rollup integration */
export interface RollupConsumerMetadata {
  /**
   * finality_contract_address is the address of the finality contract for
   * the rollup integration
   */
  finalityContractAddress: string;
}

function createBaseConsumerRegister(): ConsumerRegister {
  return {
    consumerId: "",
    consumerName: "",
    consumerDescription: "",
    cosmosConsumerMetadata: undefined,
    rollupConsumerMetadata: undefined,
    babylonRewardsCommission: "",
  };
}

export const ConsumerRegister: MessageFns<ConsumerRegister> = {
  encode(message: ConsumerRegister, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.consumerName !== "") {
      writer.uint32(18).string(message.consumerName);
    }
    if (message.consumerDescription !== "") {
      writer.uint32(26).string(message.consumerDescription);
    }
    if (message.cosmosConsumerMetadata !== undefined) {
      CosmosConsumerMetadata.encode(message.cosmosConsumerMetadata, writer.uint32(34).fork()).join();
    }
    if (message.rollupConsumerMetadata !== undefined) {
      RollupConsumerMetadata.encode(message.rollupConsumerMetadata, writer.uint32(42).fork()).join();
    }
    if (message.babylonRewardsCommission !== "") {
      writer.uint32(50).string(message.babylonRewardsCommission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerRegister {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerRegister();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consumerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consumerDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cosmosConsumerMetadata = CosmosConsumerMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rollupConsumerMetadata = RollupConsumerMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.babylonRewardsCommission = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerRegister {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      consumerName: isSet(object.consumerName) ? globalThis.String(object.consumerName) : "",
      consumerDescription: isSet(object.consumerDescription) ? globalThis.String(object.consumerDescription) : "",
      cosmosConsumerMetadata: isSet(object.cosmosConsumerMetadata)
        ? CosmosConsumerMetadata.fromJSON(object.cosmosConsumerMetadata)
        : undefined,
      rollupConsumerMetadata: isSet(object.rollupConsumerMetadata)
        ? RollupConsumerMetadata.fromJSON(object.rollupConsumerMetadata)
        : undefined,
      babylonRewardsCommission: isSet(object.babylonRewardsCommission)
        ? globalThis.String(object.babylonRewardsCommission)
        : "",
    };
  },

  toJSON(message: ConsumerRegister): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.consumerName !== "") {
      obj.consumerName = message.consumerName;
    }
    if (message.consumerDescription !== "") {
      obj.consumerDescription = message.consumerDescription;
    }
    if (message.cosmosConsumerMetadata !== undefined) {
      obj.cosmosConsumerMetadata = CosmosConsumerMetadata.toJSON(message.cosmosConsumerMetadata);
    }
    if (message.rollupConsumerMetadata !== undefined) {
      obj.rollupConsumerMetadata = RollupConsumerMetadata.toJSON(message.rollupConsumerMetadata);
    }
    if (message.babylonRewardsCommission !== "") {
      obj.babylonRewardsCommission = message.babylonRewardsCommission;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerRegister>, I>>(base?: I): ConsumerRegister {
    return ConsumerRegister.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerRegister>, I>>(object: I): ConsumerRegister {
    const message = createBaseConsumerRegister();
    message.consumerId = object.consumerId ?? "";
    message.consumerName = object.consumerName ?? "";
    message.consumerDescription = object.consumerDescription ?? "";
    message.cosmosConsumerMetadata =
      (object.cosmosConsumerMetadata !== undefined && object.cosmosConsumerMetadata !== null)
        ? CosmosConsumerMetadata.fromPartial(object.cosmosConsumerMetadata)
        : undefined;
    message.rollupConsumerMetadata =
      (object.rollupConsumerMetadata !== undefined && object.rollupConsumerMetadata !== null)
        ? RollupConsumerMetadata.fromPartial(object.rollupConsumerMetadata)
        : undefined;
    message.babylonRewardsCommission = object.babylonRewardsCommission ?? "";
    return message;
  },
};

function createBaseCosmosConsumerMetadata(): CosmosConsumerMetadata {
  return { channelId: "" };
}

export const CosmosConsumerMetadata: MessageFns<CosmosConsumerMetadata> = {
  encode(message: CosmosConsumerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== "") {
      writer.uint32(10).string(message.channelId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CosmosConsumerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCosmosConsumerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CosmosConsumerMetadata {
    return { channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "" };
  },

  toJSON(message: CosmosConsumerMetadata): unknown {
    const obj: any = {};
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CosmosConsumerMetadata>, I>>(base?: I): CosmosConsumerMetadata {
    return CosmosConsumerMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CosmosConsumerMetadata>, I>>(object: I): CosmosConsumerMetadata {
    const message = createBaseCosmosConsumerMetadata();
    message.channelId = object.channelId ?? "";
    return message;
  },
};

function createBaseRollupConsumerMetadata(): RollupConsumerMetadata {
  return { finalityContractAddress: "" };
}

export const RollupConsumerMetadata: MessageFns<RollupConsumerMetadata> = {
  encode(message: RollupConsumerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalityContractAddress !== "") {
      writer.uint32(10).string(message.finalityContractAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollupConsumerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollupConsumerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalityContractAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RollupConsumerMetadata {
    return {
      finalityContractAddress: isSet(object.finalityContractAddress)
        ? globalThis.String(object.finalityContractAddress)
        : "",
    };
  },

  toJSON(message: RollupConsumerMetadata): unknown {
    const obj: any = {};
    if (message.finalityContractAddress !== "") {
      obj.finalityContractAddress = message.finalityContractAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RollupConsumerMetadata>, I>>(base?: I): RollupConsumerMetadata {
    return RollupConsumerMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RollupConsumerMetadata>, I>>(object: I): RollupConsumerMetadata {
    const message = createBaseRollupConsumerMetadata();
    message.finalityContractAddress = object.finalityContractAddress ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

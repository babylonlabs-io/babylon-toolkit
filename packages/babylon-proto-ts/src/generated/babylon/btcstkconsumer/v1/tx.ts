// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: babylon/btcstkconsumer/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";

export const protobufPackage = "babylon.btcstkconsumer.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgRegisterConsumer defines a message for registering CZ consumers to the btcstkconsumer module. */
export interface MsgRegisterConsumer {
  signer: string;
  /** consumer_id is the ID of the consumer */
  consumerId: string;
  /** consumer_name is the name of the consumer */
  consumerName: string;
  /** consumer_description is a description for the consumer (can be empty) */
  consumerDescription: string;
  /**
   * eth_l2_finality_contract_address is the Cosmos address of the
   * finality contract. The finality contract is deployed on Babylon and
   * serves as the data availability layer for finality signatures of the ETH L2.
   * (if set, then this means this is an ETH L2 integration)
   */
  ethL2FinalityContractAddress: string;
}

/** MsgRegisterConsumerResponse is the response to the MsgRegisterConsumer message. */
export interface MsgRegisterConsumerResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgRegisterConsumer(): MsgRegisterConsumer {
  return { signer: "", consumerId: "", consumerName: "", consumerDescription: "", ethL2FinalityContractAddress: "" };
}

export const MsgRegisterConsumer: MessageFns<MsgRegisterConsumer> = {
  encode(message: MsgRegisterConsumer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.consumerId !== "") {
      writer.uint32(18).string(message.consumerId);
    }
    if (message.consumerName !== "") {
      writer.uint32(26).string(message.consumerName);
    }
    if (message.consumerDescription !== "") {
      writer.uint32(34).string(message.consumerDescription);
    }
    if (message.ethL2FinalityContractAddress !== "") {
      writer.uint32(42).string(message.ethL2FinalityContractAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterConsumer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterConsumer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consumerName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.consumerDescription = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ethL2FinalityContractAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterConsumer {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      consumerName: isSet(object.consumerName) ? globalThis.String(object.consumerName) : "",
      consumerDescription: isSet(object.consumerDescription) ? globalThis.String(object.consumerDescription) : "",
      ethL2FinalityContractAddress: isSet(object.ethL2FinalityContractAddress)
        ? globalThis.String(object.ethL2FinalityContractAddress)
        : "",
    };
  },

  toJSON(message: MsgRegisterConsumer): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.consumerName !== "") {
      obj.consumerName = message.consumerName;
    }
    if (message.consumerDescription !== "") {
      obj.consumerDescription = message.consumerDescription;
    }
    if (message.ethL2FinalityContractAddress !== "") {
      obj.ethL2FinalityContractAddress = message.ethL2FinalityContractAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterConsumer>, I>>(base?: I): MsgRegisterConsumer {
    return MsgRegisterConsumer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterConsumer>, I>>(object: I): MsgRegisterConsumer {
    const message = createBaseMsgRegisterConsumer();
    message.signer = object.signer ?? "";
    message.consumerId = object.consumerId ?? "";
    message.consumerName = object.consumerName ?? "";
    message.consumerDescription = object.consumerDescription ?? "";
    message.ethL2FinalityContractAddress = object.ethL2FinalityContractAddress ?? "";
    return message;
  },
};

function createBaseMsgRegisterConsumerResponse(): MsgRegisterConsumerResponse {
  return {};
}

export const MsgRegisterConsumerResponse: MessageFns<MsgRegisterConsumerResponse> = {
  encode(_: MsgRegisterConsumerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterConsumerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterConsumerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterConsumerResponse {
    return {};
  },

  toJSON(_: MsgRegisterConsumerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRegisterConsumerResponse>, I>>(base?: I): MsgRegisterConsumerResponse {
    return MsgRegisterConsumerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRegisterConsumerResponse>, I>>(_: I): MsgRegisterConsumerResponse {
    const message = createBaseMsgRegisterConsumerResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** RegisterConsumer registers a CZ consumer to the btcstkconsumer module. */
  RegisterConsumer(request: MsgRegisterConsumer): Promise<MsgRegisterConsumerResponse>;
}

export const MsgServiceName = "babylon.btcstkconsumer.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.RegisterConsumer = this.RegisterConsumer.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  RegisterConsumer(request: MsgRegisterConsumer): Promise<MsgRegisterConsumerResponse> {
    const data = MsgRegisterConsumer.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterConsumer", data);
    return promise.then((data) => MsgRegisterConsumerResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

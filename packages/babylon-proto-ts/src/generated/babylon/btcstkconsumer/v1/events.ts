// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/btcstkconsumer/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ConsumerType, consumerTypeFromJSON, consumerTypeToJSON, RollupConsumerMetadata } from "./btcstkconsumer";

export const protobufPackage = "babylon.btcstkconsumer.v1";

/** EventConsumerRegistered is the event emitted when a consumer is registered */
export interface EventConsumerRegistered {
  /** consumer_id is the id of the consumer */
  consumerId: string;
  /** consumer_name is the name of the consumer */
  consumerName: string;
  /** consumer_description is a description for the consumer */
  consumerDescription: string;
  /** consumer_type is the type of the consumer */
  consumerType: ConsumerType;
  /**
   * consumer_metadata is necessary metadata of the consumer, and the data
   * depends on the type of integration
   */
  rollupConsumerMetadata:
    | RollupConsumerMetadata
    | undefined;
  /**
   * babylon_rewards_commission is the commission rate that Babylon takes from rewards
   * distributed to finality providers for this BSN consumer
   */
  babylonRewardsCommission: string;
}

function createBaseEventConsumerRegistered(): EventConsumerRegistered {
  return {
    consumerId: "",
    consumerName: "",
    consumerDescription: "",
    consumerType: 0,
    rollupConsumerMetadata: undefined,
    babylonRewardsCommission: "",
  };
}

export const EventConsumerRegistered: MessageFns<EventConsumerRegistered> = {
  encode(message: EventConsumerRegistered, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.consumerName !== "") {
      writer.uint32(18).string(message.consumerName);
    }
    if (message.consumerDescription !== "") {
      writer.uint32(26).string(message.consumerDescription);
    }
    if (message.consumerType !== 0) {
      writer.uint32(32).int32(message.consumerType);
    }
    if (message.rollupConsumerMetadata !== undefined) {
      RollupConsumerMetadata.encode(message.rollupConsumerMetadata, writer.uint32(42).fork()).join();
    }
    if (message.babylonRewardsCommission !== "") {
      writer.uint32(50).string(message.babylonRewardsCommission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventConsumerRegistered {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventConsumerRegistered();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consumerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consumerDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.consumerType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rollupConsumerMetadata = RollupConsumerMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.babylonRewardsCommission = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventConsumerRegistered {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      consumerName: isSet(object.consumerName) ? globalThis.String(object.consumerName) : "",
      consumerDescription: isSet(object.consumerDescription) ? globalThis.String(object.consumerDescription) : "",
      consumerType: isSet(object.consumerType) ? consumerTypeFromJSON(object.consumerType) : 0,
      rollupConsumerMetadata: isSet(object.rollupConsumerMetadata)
        ? RollupConsumerMetadata.fromJSON(object.rollupConsumerMetadata)
        : undefined,
      babylonRewardsCommission: isSet(object.babylonRewardsCommission)
        ? globalThis.String(object.babylonRewardsCommission)
        : "",
    };
  },

  toJSON(message: EventConsumerRegistered): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.consumerName !== "") {
      obj.consumerName = message.consumerName;
    }
    if (message.consumerDescription !== "") {
      obj.consumerDescription = message.consumerDescription;
    }
    if (message.consumerType !== 0) {
      obj.consumerType = consumerTypeToJSON(message.consumerType);
    }
    if (message.rollupConsumerMetadata !== undefined) {
      obj.rollupConsumerMetadata = RollupConsumerMetadata.toJSON(message.rollupConsumerMetadata);
    }
    if (message.babylonRewardsCommission !== "") {
      obj.babylonRewardsCommission = message.babylonRewardsCommission;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventConsumerRegistered>, I>>(base?: I): EventConsumerRegistered {
    return EventConsumerRegistered.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventConsumerRegistered>, I>>(object: I): EventConsumerRegistered {
    const message = createBaseEventConsumerRegistered();
    message.consumerId = object.consumerId ?? "";
    message.consumerName = object.consumerName ?? "";
    message.consumerDescription = object.consumerDescription ?? "";
    message.consumerType = object.consumerType ?? 0;
    message.rollupConsumerMetadata =
      (object.rollupConsumerMetadata !== undefined && object.rollupConsumerMetadata !== null)
        ? RollupConsumerMetadata.fromPartial(object.rollupConsumerMetadata)
        : undefined;
    message.babylonRewardsCommission = object.babylonRewardsCommission ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

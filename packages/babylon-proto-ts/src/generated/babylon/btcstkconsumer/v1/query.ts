// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: babylon/btcstkconsumer/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Description } from "../../../cosmos/staking/v1beta1/staking";
import { ProofOfPossessionBTC } from "../../btcstaking/v1/pop";
import { ConsumerRegister } from "./btcstkconsumer";
import { Params } from "./params";

export const protobufPackage = "babylon.btcstkconsumer.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/** QueryConsumerRegistryListRequest is request type for the Query/ConsumerRegistryList RPC method */
export interface QueryConsumerRegistryListRequest {
  /** pagination defines whether to have the pagination in the request */
  pagination: PageRequest | undefined;
}

/** QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method */
export interface QueryConsumerRegistryListResponse {
  /** consumer_ids are IDs of the consumers in ascending alphabetical order */
  consumerIds: string[];
  /** pagination defines the pagination in the response */
  pagination: PageResponse | undefined;
}

/** QueryConsumersRegistryRequest is request type for the Query/ConsumersRegistry RPC method. */
export interface QueryConsumersRegistryRequest {
  consumerIds: string[];
}

/** QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method. */
export interface QueryConsumersRegistryResponse {
  consumersRegister: ConsumerRegister[];
}

/**
 * QueryFinalityProvidersRequest is the request type for the
 * Query/FinalityProviders RPC method.
 */
export interface QueryFinalityProvidersRequest {
  consumerId: string;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryFinalityProvidersResponse is the response type for the
 * Query/FinalityProviders RPC method.
 */
export interface QueryFinalityProvidersResponse {
  /** finality_providers contains all the finality providers */
  finalityProviders: FinalityProviderResponse[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/** QueryFinalityProviderRequest requests information about a finality provider */
export interface QueryFinalityProviderRequest {
  /** consumer id is the consumer id this finality provider is registered to */
  consumerId: string;
  /** fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider */
  fpBtcPkHex: string;
}

/** QueryFinalityProviderResponse contains information about a finality provider */
export interface QueryFinalityProviderResponse {
  /** finality_provider contains the FinalityProvider */
  finalityProvider: FinalityProviderResponse | undefined;
}

/** FinalityProviderResponse defines a finality provider with voting power information. */
export interface FinalityProviderResponse {
  /** description defines the description terms for the finality provider. */
  description:
    | Description
    | undefined;
  /** commission defines the commission rate of the finality provider. */
  commission: string;
  /** babylon_pk is the Babylon secp256k1 PK of this finality provider */
  addr: string;
  /**
   * btc_pk is the Bitcoin secp256k1 PK of this finality provider
   * the PK follows encoding in BIP-340 spec
   */
  btcPk: Uint8Array;
  /** pop is the proof of possession of babylon_pk and btc_pk */
  pop:
    | ProofOfPossessionBTC
    | undefined;
  /**
   * slashed_babylon_height indicates the Babylon height when
   * the finality provider is slashed.
   * if it's 0 then the finality provider is not slashed
   */
  slashedBabylonHeight: number;
  /**
   * slashed_btc_height indicates the BTC height when
   * the finality provider is slashed.
   * if it's 0 then the finality provider is not slashed
   */
  slashedBtcHeight: number;
  /** height is the queried Babylon height */
  height: number;
  /** voting_power is the voting power of this finality provider at the given height */
  votingPower: number;
  /** consumer_id is the consumer id this finality provider is registered to */
  consumerId: string;
}

/** QueryFinalityProviderConsumerRequest requests the consumer a CZ finality provider belongs to */
export interface QueryFinalityProviderConsumerRequest {
  /** fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider */
  fpBtcPkHex: string;
}

/** QueryFinalityProviderConsumerResponse returns the CZ finality provier consumer id */
export interface QueryFinalityProviderConsumerResponse {
  consumerId: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumerRegistryListRequest(): QueryConsumerRegistryListRequest {
  return { pagination: undefined };
}

export const QueryConsumerRegistryListRequest: MessageFns<QueryConsumerRegistryListRequest> = {
  encode(message: QueryConsumerRegistryListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumerRegistryListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumerRegistryListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumerRegistryListRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryConsumerRegistryListRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumerRegistryListRequest>, I>>(
    base?: I,
  ): QueryConsumerRegistryListRequest {
    return QueryConsumerRegistryListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumerRegistryListRequest>, I>>(
    object: I,
  ): QueryConsumerRegistryListRequest {
    const message = createBaseQueryConsumerRegistryListRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumerRegistryListResponse(): QueryConsumerRegistryListResponse {
  return { consumerIds: [], pagination: undefined };
}

export const QueryConsumerRegistryListResponse: MessageFns<QueryConsumerRegistryListResponse> = {
  encode(message: QueryConsumerRegistryListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerIds) {
      writer.uint32(10).string(v!);
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumerRegistryListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumerRegistryListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumerRegistryListResponse {
    return {
      consumerIds: globalThis.Array.isArray(object?.consumerIds)
        ? object.consumerIds.map((e: any) => globalThis.String(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryConsumerRegistryListResponse): unknown {
    const obj: any = {};
    if (message.consumerIds?.length) {
      obj.consumerIds = message.consumerIds;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumerRegistryListResponse>, I>>(
    base?: I,
  ): QueryConsumerRegistryListResponse {
    return QueryConsumerRegistryListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumerRegistryListResponse>, I>>(
    object: I,
  ): QueryConsumerRegistryListResponse {
    const message = createBaseQueryConsumerRegistryListResponse();
    message.consumerIds = object.consumerIds?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumersRegistryRequest(): QueryConsumersRegistryRequest {
  return { consumerIds: [] };
}

export const QueryConsumersRegistryRequest: MessageFns<QueryConsumersRegistryRequest> = {
  encode(message: QueryConsumersRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumersRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumersRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumersRegistryRequest {
    return {
      consumerIds: globalThis.Array.isArray(object?.consumerIds)
        ? object.consumerIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryConsumersRegistryRequest): unknown {
    const obj: any = {};
    if (message.consumerIds?.length) {
      obj.consumerIds = message.consumerIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumersRegistryRequest>, I>>(base?: I): QueryConsumersRegistryRequest {
    return QueryConsumersRegistryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumersRegistryRequest>, I>>(
    object: I,
  ): QueryConsumersRegistryRequest {
    const message = createBaseQueryConsumersRegistryRequest();
    message.consumerIds = object.consumerIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryConsumersRegistryResponse(): QueryConsumersRegistryResponse {
  return { consumersRegister: [] };
}

export const QueryConsumersRegistryResponse: MessageFns<QueryConsumersRegistryResponse> = {
  encode(message: QueryConsumersRegistryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumersRegister) {
      ConsumerRegister.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumersRegistryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumersRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumersRegister.push(ConsumerRegister.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumersRegistryResponse {
    return {
      consumersRegister: globalThis.Array.isArray(object?.consumersRegister)
        ? object.consumersRegister.map((e: any) => ConsumerRegister.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryConsumersRegistryResponse): unknown {
    const obj: any = {};
    if (message.consumersRegister?.length) {
      obj.consumersRegister = message.consumersRegister.map((e) => ConsumerRegister.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumersRegistryResponse>, I>>(base?: I): QueryConsumersRegistryResponse {
    return QueryConsumersRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumersRegistryResponse>, I>>(
    object: I,
  ): QueryConsumersRegistryResponse {
    const message = createBaseQueryConsumersRegistryResponse();
    message.consumersRegister = object.consumersRegister?.map((e) => ConsumerRegister.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryFinalityProvidersRequest(): QueryFinalityProvidersRequest {
  return { consumerId: "", pagination: undefined };
}

export const QueryFinalityProvidersRequest: MessageFns<QueryFinalityProvidersRequest> = {
  encode(message: QueryFinalityProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProvidersRequest {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryFinalityProvidersRequest): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProvidersRequest>, I>>(base?: I): QueryFinalityProvidersRequest {
    return QueryFinalityProvidersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProvidersRequest>, I>>(
    object: I,
  ): QueryFinalityProvidersRequest {
    const message = createBaseQueryFinalityProvidersRequest();
    message.consumerId = object.consumerId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryFinalityProvidersResponse(): QueryFinalityProvidersResponse {
  return { finalityProviders: [], pagination: undefined };
}

export const QueryFinalityProvidersResponse: MessageFns<QueryFinalityProvidersResponse> = {
  encode(message: QueryFinalityProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.finalityProviders) {
      FinalityProviderResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalityProviders.push(FinalityProviderResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProvidersResponse {
    return {
      finalityProviders: globalThis.Array.isArray(object?.finalityProviders)
        ? object.finalityProviders.map((e: any) => FinalityProviderResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryFinalityProvidersResponse): unknown {
    const obj: any = {};
    if (message.finalityProviders?.length) {
      obj.finalityProviders = message.finalityProviders.map((e) => FinalityProviderResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProvidersResponse>, I>>(base?: I): QueryFinalityProvidersResponse {
    return QueryFinalityProvidersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProvidersResponse>, I>>(
    object: I,
  ): QueryFinalityProvidersResponse {
    const message = createBaseQueryFinalityProvidersResponse();
    message.finalityProviders = object.finalityProviders?.map((e) => FinalityProviderResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryFinalityProviderRequest(): QueryFinalityProviderRequest {
  return { consumerId: "", fpBtcPkHex: "" };
}

export const QueryFinalityProviderRequest: MessageFns<QueryFinalityProviderRequest> = {
  encode(message: QueryFinalityProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.fpBtcPkHex !== "") {
      writer.uint32(18).string(message.fpBtcPkHex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fpBtcPkHex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProviderRequest {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      fpBtcPkHex: isSet(object.fpBtcPkHex) ? globalThis.String(object.fpBtcPkHex) : "",
    };
  },

  toJSON(message: QueryFinalityProviderRequest): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.fpBtcPkHex !== "") {
      obj.fpBtcPkHex = message.fpBtcPkHex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProviderRequest>, I>>(base?: I): QueryFinalityProviderRequest {
    return QueryFinalityProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProviderRequest>, I>>(object: I): QueryFinalityProviderRequest {
    const message = createBaseQueryFinalityProviderRequest();
    message.consumerId = object.consumerId ?? "";
    message.fpBtcPkHex = object.fpBtcPkHex ?? "";
    return message;
  },
};

function createBaseQueryFinalityProviderResponse(): QueryFinalityProviderResponse {
  return { finalityProvider: undefined };
}

export const QueryFinalityProviderResponse: MessageFns<QueryFinalityProviderResponse> = {
  encode(message: QueryFinalityProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalityProvider !== undefined) {
      FinalityProviderResponse.encode(message.finalityProvider, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalityProvider = FinalityProviderResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProviderResponse {
    return {
      finalityProvider: isSet(object.finalityProvider)
        ? FinalityProviderResponse.fromJSON(object.finalityProvider)
        : undefined,
    };
  },

  toJSON(message: QueryFinalityProviderResponse): unknown {
    const obj: any = {};
    if (message.finalityProvider !== undefined) {
      obj.finalityProvider = FinalityProviderResponse.toJSON(message.finalityProvider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProviderResponse>, I>>(base?: I): QueryFinalityProviderResponse {
    return QueryFinalityProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProviderResponse>, I>>(
    object: I,
  ): QueryFinalityProviderResponse {
    const message = createBaseQueryFinalityProviderResponse();
    message.finalityProvider = (object.finalityProvider !== undefined && object.finalityProvider !== null)
      ? FinalityProviderResponse.fromPartial(object.finalityProvider)
      : undefined;
    return message;
  },
};

function createBaseFinalityProviderResponse(): FinalityProviderResponse {
  return {
    description: undefined,
    commission: "",
    addr: "",
    btcPk: new Uint8Array(0),
    pop: undefined,
    slashedBabylonHeight: 0,
    slashedBtcHeight: 0,
    height: 0,
    votingPower: 0,
    consumerId: "",
  };
}

export const FinalityProviderResponse: MessageFns<FinalityProviderResponse> = {
  encode(message: FinalityProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== undefined) {
      Description.encode(message.description, writer.uint32(10).fork()).join();
    }
    if (message.commission !== "") {
      writer.uint32(18).string(message.commission);
    }
    if (message.addr !== "") {
      writer.uint32(26).string(message.addr);
    }
    if (message.btcPk.length !== 0) {
      writer.uint32(34).bytes(message.btcPk);
    }
    if (message.pop !== undefined) {
      ProofOfPossessionBTC.encode(message.pop, writer.uint32(42).fork()).join();
    }
    if (message.slashedBabylonHeight !== 0) {
      writer.uint32(48).uint64(message.slashedBabylonHeight);
    }
    if (message.slashedBtcHeight !== 0) {
      writer.uint32(56).uint32(message.slashedBtcHeight);
    }
    if (message.height !== 0) {
      writer.uint32(64).uint64(message.height);
    }
    if (message.votingPower !== 0) {
      writer.uint32(72).uint64(message.votingPower);
    }
    if (message.consumerId !== "") {
      writer.uint32(82).string(message.consumerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = Description.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commission = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.addr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.btcPk = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pop = ProofOfPossessionBTC.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.slashedBabylonHeight = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.slashedBtcHeight = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.votingPower = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityProviderResponse {
    return {
      description: isSet(object.description) ? Description.fromJSON(object.description) : undefined,
      commission: isSet(object.commission) ? globalThis.String(object.commission) : "",
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      btcPk: isSet(object.btcPk) ? bytesFromBase64(object.btcPk) : new Uint8Array(0),
      pop: isSet(object.pop) ? ProofOfPossessionBTC.fromJSON(object.pop) : undefined,
      slashedBabylonHeight: isSet(object.slashedBabylonHeight) ? globalThis.Number(object.slashedBabylonHeight) : 0,
      slashedBtcHeight: isSet(object.slashedBtcHeight) ? globalThis.Number(object.slashedBtcHeight) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      votingPower: isSet(object.votingPower) ? globalThis.Number(object.votingPower) : 0,
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
    };
  },

  toJSON(message: FinalityProviderResponse): unknown {
    const obj: any = {};
    if (message.description !== undefined) {
      obj.description = Description.toJSON(message.description);
    }
    if (message.commission !== "") {
      obj.commission = message.commission;
    }
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.btcPk.length !== 0) {
      obj.btcPk = base64FromBytes(message.btcPk);
    }
    if (message.pop !== undefined) {
      obj.pop = ProofOfPossessionBTC.toJSON(message.pop);
    }
    if (message.slashedBabylonHeight !== 0) {
      obj.slashedBabylonHeight = Math.round(message.slashedBabylonHeight);
    }
    if (message.slashedBtcHeight !== 0) {
      obj.slashedBtcHeight = Math.round(message.slashedBtcHeight);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.votingPower !== 0) {
      obj.votingPower = Math.round(message.votingPower);
    }
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalityProviderResponse>, I>>(base?: I): FinalityProviderResponse {
    return FinalityProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalityProviderResponse>, I>>(object: I): FinalityProviderResponse {
    const message = createBaseFinalityProviderResponse();
    message.description = (object.description !== undefined && object.description !== null)
      ? Description.fromPartial(object.description)
      : undefined;
    message.commission = object.commission ?? "";
    message.addr = object.addr ?? "";
    message.btcPk = object.btcPk ?? new Uint8Array(0);
    message.pop = (object.pop !== undefined && object.pop !== null)
      ? ProofOfPossessionBTC.fromPartial(object.pop)
      : undefined;
    message.slashedBabylonHeight = object.slashedBabylonHeight ?? 0;
    message.slashedBtcHeight = object.slashedBtcHeight ?? 0;
    message.height = object.height ?? 0;
    message.votingPower = object.votingPower ?? 0;
    message.consumerId = object.consumerId ?? "";
    return message;
  },
};

function createBaseQueryFinalityProviderConsumerRequest(): QueryFinalityProviderConsumerRequest {
  return { fpBtcPkHex: "" };
}

export const QueryFinalityProviderConsumerRequest: MessageFns<QueryFinalityProviderConsumerRequest> = {
  encode(message: QueryFinalityProviderConsumerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fpBtcPkHex !== "") {
      writer.uint32(10).string(message.fpBtcPkHex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProviderConsumerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProviderConsumerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fpBtcPkHex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProviderConsumerRequest {
    return { fpBtcPkHex: isSet(object.fpBtcPkHex) ? globalThis.String(object.fpBtcPkHex) : "" };
  },

  toJSON(message: QueryFinalityProviderConsumerRequest): unknown {
    const obj: any = {};
    if (message.fpBtcPkHex !== "") {
      obj.fpBtcPkHex = message.fpBtcPkHex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProviderConsumerRequest>, I>>(
    base?: I,
  ): QueryFinalityProviderConsumerRequest {
    return QueryFinalityProviderConsumerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProviderConsumerRequest>, I>>(
    object: I,
  ): QueryFinalityProviderConsumerRequest {
    const message = createBaseQueryFinalityProviderConsumerRequest();
    message.fpBtcPkHex = object.fpBtcPkHex ?? "";
    return message;
  },
};

function createBaseQueryFinalityProviderConsumerResponse(): QueryFinalityProviderConsumerResponse {
  return { consumerId: "" };
}

export const QueryFinalityProviderConsumerResponse: MessageFns<QueryFinalityProviderConsumerResponse> = {
  encode(message: QueryFinalityProviderConsumerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalityProviderConsumerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalityProviderConsumerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalityProviderConsumerResponse {
    return { consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "" };
  },

  toJSON(message: QueryFinalityProviderConsumerResponse): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalityProviderConsumerResponse>, I>>(
    base?: I,
  ): QueryFinalityProviderConsumerResponse {
    return QueryFinalityProviderConsumerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalityProviderConsumerResponse>, I>>(
    object: I,
  ): QueryFinalityProviderConsumerResponse {
    const message = createBaseQueryFinalityProviderConsumerResponse();
    message.consumerId = object.consumerId ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ConsumerRegistryList queries the list of consumers that are registered to Babylon */
  ConsumerRegistryList(request: QueryConsumerRegistryListRequest): Promise<QueryConsumerRegistryListResponse>;
  /** ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view */
  ConsumersRegistry(request: QueryConsumersRegistryRequest): Promise<QueryConsumersRegistryResponse>;
  /** FinalityProviderConsumer info about one finality provider's consumer id */
  FinalityProviderConsumer(
    request: QueryFinalityProviderConsumerRequest,
  ): Promise<QueryFinalityProviderConsumerResponse>;
  /** FinalityProviders queries all finality providers for a given consumer */
  FinalityProviders(request: QueryFinalityProvidersRequest): Promise<QueryFinalityProvidersResponse>;
  /** FinalityProvider info about one finality provider */
  FinalityProvider(request: QueryFinalityProviderRequest): Promise<QueryFinalityProviderResponse>;
}

export const QueryServiceName = "babylon.btcstkconsumer.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.ConsumerRegistryList = this.ConsumerRegistryList.bind(this);
    this.ConsumersRegistry = this.ConsumersRegistry.bind(this);
    this.FinalityProviderConsumer = this.FinalityProviderConsumer.bind(this);
    this.FinalityProviders = this.FinalityProviders.bind(this);
    this.FinalityProvider = this.FinalityProvider.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  ConsumerRegistryList(request: QueryConsumerRegistryListRequest): Promise<QueryConsumerRegistryListResponse> {
    const data = QueryConsumerRegistryListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConsumerRegistryList", data);
    return promise.then((data) => QueryConsumerRegistryListResponse.decode(new BinaryReader(data)));
  }

  ConsumersRegistry(request: QueryConsumersRegistryRequest): Promise<QueryConsumersRegistryResponse> {
    const data = QueryConsumersRegistryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConsumersRegistry", data);
    return promise.then((data) => QueryConsumersRegistryResponse.decode(new BinaryReader(data)));
  }

  FinalityProviderConsumer(
    request: QueryFinalityProviderConsumerRequest,
  ): Promise<QueryFinalityProviderConsumerResponse> {
    const data = QueryFinalityProviderConsumerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalityProviderConsumer", data);
    return promise.then((data) => QueryFinalityProviderConsumerResponse.decode(new BinaryReader(data)));
  }

  FinalityProviders(request: QueryFinalityProvidersRequest): Promise<QueryFinalityProvidersResponse> {
    const data = QueryFinalityProvidersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalityProviders", data);
    return promise.then((data) => QueryFinalityProvidersResponse.decode(new BinaryReader(data)));
  }

  FinalityProvider(request: QueryFinalityProviderRequest): Promise<QueryFinalityProviderResponse> {
    const data = QueryFinalityProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalityProvider", data);
    return promise.then((data) => QueryFinalityProviderResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

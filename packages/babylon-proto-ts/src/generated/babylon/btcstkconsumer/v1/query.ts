// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/btcstkconsumer/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";

export const protobufPackage = "babylon.btcstkconsumer.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/** QueryConsumerRegistryListRequest is request type for the Query/ConsumerRegistryList RPC method */
export interface QueryConsumerRegistryListRequest {
  /** pagination defines whether to have the pagination in the request */
  pagination: PageRequest | undefined;
}

/** QueryConsumerRegistryListResponse is response type for the Query/ConsumerRegistryList RPC method */
export interface QueryConsumerRegistryListResponse {
  /** consumer_registers are the registered consumers in ascending alphabetical order */
  consumerRegisters: ConsumerRegisterResponse[];
  /** pagination defines the pagination in the response */
  pagination: PageResponse | undefined;
}

/** QueryConsumersRegistryRequest is request type for the Query/ConsumersRegistry RPC method. */
export interface QueryConsumersRegistryRequest {
  consumerIds: string[];
}

/** QueryConsumersRegistryResponse is response type for the Query/ConsumersRegistry RPC method. */
export interface QueryConsumersRegistryResponse {
  consumerRegisters: ConsumerRegisterResponse[];
}

/**
 * ConsumerRegisterResponse contains the information for a registered consumer
 * The struct is used in the query responses
 */
export interface ConsumerRegisterResponse {
  /**
   * consumer_id is the ID of the consumer
   * - for Cosmos SDK chains, the consumer ID will be the IBC client ID
   * - for rollup chains, the consumer ID will be the chain ID of the rollup
   *   chain
   */
  consumerId: string;
  /** consumer_name is the name of the consumer */
  consumerName: string;
  /** consumer_description is a description for the consumer (can be empty) */
  consumerDescription: string;
  /**
   * cosmos_channel_id is the IBC channel ID for the consumer
   * set only for Cosmos integration
   */
  cosmosChannelId: string;
  /**
   * rollup_finality_contract_address is the address of the finality contract
   * set only for rollup integration
   */
  rollupFinalityContractAddress: string;
  /**
   * babylon_rewards_commission is the commission rate that Babylon takes from rewards
   * distributed to finality providers for this BSN consumer
   */
  babylonRewardsCommission: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumerRegistryListRequest(): QueryConsumerRegistryListRequest {
  return { pagination: undefined };
}

export const QueryConsumerRegistryListRequest: MessageFns<QueryConsumerRegistryListRequest> = {
  encode(message: QueryConsumerRegistryListRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumerRegistryListRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumerRegistryListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumerRegistryListRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryConsumerRegistryListRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumerRegistryListRequest>, I>>(
    base?: I,
  ): QueryConsumerRegistryListRequest {
    return QueryConsumerRegistryListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumerRegistryListRequest>, I>>(
    object: I,
  ): QueryConsumerRegistryListRequest {
    const message = createBaseQueryConsumerRegistryListRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumerRegistryListResponse(): QueryConsumerRegistryListResponse {
  return { consumerRegisters: [], pagination: undefined };
}

export const QueryConsumerRegistryListResponse: MessageFns<QueryConsumerRegistryListResponse> = {
  encode(message: QueryConsumerRegistryListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerRegisters) {
      ConsumerRegisterResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumerRegistryListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumerRegistryListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerRegisters.push(ConsumerRegisterResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumerRegistryListResponse {
    return {
      consumerRegisters: globalThis.Array.isArray(object?.consumerRegisters)
        ? object.consumerRegisters.map((e: any) => ConsumerRegisterResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryConsumerRegistryListResponse): unknown {
    const obj: any = {};
    if (message.consumerRegisters?.length) {
      obj.consumerRegisters = message.consumerRegisters.map((e) => ConsumerRegisterResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumerRegistryListResponse>, I>>(
    base?: I,
  ): QueryConsumerRegistryListResponse {
    return QueryConsumerRegistryListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumerRegistryListResponse>, I>>(
    object: I,
  ): QueryConsumerRegistryListResponse {
    const message = createBaseQueryConsumerRegistryListResponse();
    message.consumerRegisters = object.consumerRegisters?.map((e) => ConsumerRegisterResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryConsumersRegistryRequest(): QueryConsumersRegistryRequest {
  return { consumerIds: [] };
}

export const QueryConsumersRegistryRequest: MessageFns<QueryConsumersRegistryRequest> = {
  encode(message: QueryConsumersRegistryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumersRegistryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumersRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumersRegistryRequest {
    return {
      consumerIds: globalThis.Array.isArray(object?.consumerIds)
        ? object.consumerIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryConsumersRegistryRequest): unknown {
    const obj: any = {};
    if (message.consumerIds?.length) {
      obj.consumerIds = message.consumerIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumersRegistryRequest>, I>>(base?: I): QueryConsumersRegistryRequest {
    return QueryConsumersRegistryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumersRegistryRequest>, I>>(
    object: I,
  ): QueryConsumersRegistryRequest {
    const message = createBaseQueryConsumersRegistryRequest();
    message.consumerIds = object.consumerIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryConsumersRegistryResponse(): QueryConsumersRegistryResponse {
  return { consumerRegisters: [] };
}

export const QueryConsumersRegistryResponse: MessageFns<QueryConsumersRegistryResponse> = {
  encode(message: QueryConsumersRegistryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerRegisters) {
      ConsumerRegisterResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConsumersRegistryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConsumersRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerRegisters.push(ConsumerRegisterResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConsumersRegistryResponse {
    return {
      consumerRegisters: globalThis.Array.isArray(object?.consumerRegisters)
        ? object.consumerRegisters.map((e: any) => ConsumerRegisterResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryConsumersRegistryResponse): unknown {
    const obj: any = {};
    if (message.consumerRegisters?.length) {
      obj.consumerRegisters = message.consumerRegisters.map((e) => ConsumerRegisterResponse.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryConsumersRegistryResponse>, I>>(base?: I): QueryConsumersRegistryResponse {
    return QueryConsumersRegistryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryConsumersRegistryResponse>, I>>(
    object: I,
  ): QueryConsumersRegistryResponse {
    const message = createBaseQueryConsumersRegistryResponse();
    message.consumerRegisters = object.consumerRegisters?.map((e) => ConsumerRegisterResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConsumerRegisterResponse(): ConsumerRegisterResponse {
  return {
    consumerId: "",
    consumerName: "",
    consumerDescription: "",
    cosmosChannelId: "",
    rollupFinalityContractAddress: "",
    babylonRewardsCommission: "",
  };
}

export const ConsumerRegisterResponse: MessageFns<ConsumerRegisterResponse> = {
  encode(message: ConsumerRegisterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.consumerName !== "") {
      writer.uint32(18).string(message.consumerName);
    }
    if (message.consumerDescription !== "") {
      writer.uint32(26).string(message.consumerDescription);
    }
    if (message.cosmosChannelId !== "") {
      writer.uint32(34).string(message.cosmosChannelId);
    }
    if (message.rollupFinalityContractAddress !== "") {
      writer.uint32(42).string(message.rollupFinalityContractAddress);
    }
    if (message.babylonRewardsCommission !== "") {
      writer.uint32(50).string(message.babylonRewardsCommission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsumerRegisterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consumerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consumerDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cosmosChannelId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rollupFinalityContractAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.babylonRewardsCommission = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerRegisterResponse {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      consumerName: isSet(object.consumerName) ? globalThis.String(object.consumerName) : "",
      consumerDescription: isSet(object.consumerDescription) ? globalThis.String(object.consumerDescription) : "",
      cosmosChannelId: isSet(object.cosmosChannelId) ? globalThis.String(object.cosmosChannelId) : "",
      rollupFinalityContractAddress: isSet(object.rollupFinalityContractAddress)
        ? globalThis.String(object.rollupFinalityContractAddress)
        : "",
      babylonRewardsCommission: isSet(object.babylonRewardsCommission)
        ? globalThis.String(object.babylonRewardsCommission)
        : "",
    };
  },

  toJSON(message: ConsumerRegisterResponse): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.consumerName !== "") {
      obj.consumerName = message.consumerName;
    }
    if (message.consumerDescription !== "") {
      obj.consumerDescription = message.consumerDescription;
    }
    if (message.cosmosChannelId !== "") {
      obj.cosmosChannelId = message.cosmosChannelId;
    }
    if (message.rollupFinalityContractAddress !== "") {
      obj.rollupFinalityContractAddress = message.rollupFinalityContractAddress;
    }
    if (message.babylonRewardsCommission !== "") {
      obj.babylonRewardsCommission = message.babylonRewardsCommission;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerRegisterResponse>, I>>(base?: I): ConsumerRegisterResponse {
    return ConsumerRegisterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerRegisterResponse>, I>>(object: I): ConsumerRegisterResponse {
    const message = createBaseConsumerRegisterResponse();
    message.consumerId = object.consumerId ?? "";
    message.consumerName = object.consumerName ?? "";
    message.consumerDescription = object.consumerDescription ?? "";
    message.cosmosChannelId = object.cosmosChannelId ?? "";
    message.rollupFinalityContractAddress = object.rollupFinalityContractAddress ?? "";
    message.babylonRewardsCommission = object.babylonRewardsCommission ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ConsumerRegistryList queries the list of consumers that are registered to Babylon */
  ConsumerRegistryList(request: QueryConsumerRegistryListRequest): Promise<QueryConsumerRegistryListResponse>;
  /** ConsumersRegistry queries the latest info for a given list of consumers in Babylon's view */
  ConsumersRegistry(request: QueryConsumersRegistryRequest): Promise<QueryConsumersRegistryResponse>;
}

export const QueryServiceName = "babylon.btcstkconsumer.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.ConsumerRegistryList = this.ConsumerRegistryList.bind(this);
    this.ConsumersRegistry = this.ConsumersRegistry.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  ConsumerRegistryList(request: QueryConsumerRegistryListRequest): Promise<QueryConsumerRegistryListResponse> {
    const data = QueryConsumerRegistryListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConsumerRegistryList", data);
    return promise.then((data) => QueryConsumerRegistryListResponse.decode(new BinaryReader(data)));
  }

  ConsumersRegistry(request: QueryConsumersRegistryRequest): Promise<QueryConsumersRegistryResponse> {
    const data = QueryConsumersRegistryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConsumersRegistry", data);
    return promise.then((data) => QueryConsumersRegistryResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/zoneconcierge/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { BTCChainSegment, ChainInfo, ChainInfoWithProof, IndexedHeader, ProofEpochSealed } from "./zoneconcierge";

export const protobufPackage = "babylon.zoneconcierge.v1";

/** GenesisState defines the zoneconcierge module's genesis state. */
export interface GenesisState {
  /** port identification */
  portId: string;
  /** params holds the zoneconcierge module's parameters */
  params:
    | Params
    | undefined;
  /** chains_info contains all the registered chains information */
  chainsInfo: ChainInfo[];
  /**
   * chains_indexed_headers contains the canonical chains
   * of the consumer chains, formed as a list of IndexedHeaders
   */
  chainsIndexedHeaders: IndexedHeader[];
  /**
   * chains_epochs_info contains the epochs' latest ChainInfo for a consumer
   * chain
   */
  chainsEpochsInfo: EpochChainInfoEntry[];
  /**
   * last_sent_segment is the last BTC chain segment
   * which was broadcasted to the other light clients
   */
  lastSentSegment:
    | BTCChainSegment
    | undefined;
  /** sealed_epochs_proofs contains the proofs that each epoch is sealed */
  sealedEpochsProofs: SealedEpochProofEntry[];
}

/**
 * EpochChainInfoEntry contains each epoch's latest ChainInfo for a consumer
 * chain
 */
export interface EpochChainInfoEntry {
  /** epoch_number is the number of the epoch */
  epochNumber: number;
  /** chain_info contains the last consumer chain info of the epoch */
  chainInfo: ChainInfoWithProof | undefined;
}

/** SealedEpochProofEntry contains each epoch's proof that it is sealed */
export interface SealedEpochProofEntry {
  /** epoch_number is the number of the epoch */
  epochNumber: number;
  /** proof is the proof that an epoch is sealed by the sealer header */
  proof: ProofEpochSealed | undefined;
}

function createBaseGenesisState(): GenesisState {
  return {
    portId: "",
    params: undefined,
    chainsInfo: [],
    chainsIndexedHeaders: [],
    chainsEpochsInfo: [],
    lastSentSegment: undefined,
    sealedEpochsProofs: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portId !== "") {
      writer.uint32(10).string(message.portId);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    for (const v of message.chainsInfo) {
      ChainInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.chainsIndexedHeaders) {
      IndexedHeader.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.chainsEpochsInfo) {
      EpochChainInfoEntry.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.lastSentSegment !== undefined) {
      BTCChainSegment.encode(message.lastSentSegment, writer.uint32(50).fork()).join();
    }
    for (const v of message.sealedEpochsProofs) {
      SealedEpochProofEntry.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.portId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainsInfo.push(ChainInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chainsIndexedHeaders.push(IndexedHeader.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chainsEpochsInfo.push(EpochChainInfoEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.lastSentSegment = BTCChainSegment.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sealedEpochsProofs.push(SealedEpochProofEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      portId: isSet(object.portId) ? globalThis.String(object.portId) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      chainsInfo: globalThis.Array.isArray(object?.chainsInfo)
        ? object.chainsInfo.map((e: any) => ChainInfo.fromJSON(e))
        : [],
      chainsIndexedHeaders: globalThis.Array.isArray(object?.chainsIndexedHeaders)
        ? object.chainsIndexedHeaders.map((e: any) => IndexedHeader.fromJSON(e))
        : [],
      chainsEpochsInfo: globalThis.Array.isArray(object?.chainsEpochsInfo)
        ? object.chainsEpochsInfo.map((e: any) => EpochChainInfoEntry.fromJSON(e))
        : [],
      lastSentSegment: isSet(object.lastSentSegment) ? BTCChainSegment.fromJSON(object.lastSentSegment) : undefined,
      sealedEpochsProofs: globalThis.Array.isArray(object?.sealedEpochsProofs)
        ? object.sealedEpochsProofs.map((e: any) => SealedEpochProofEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.portId !== "") {
      obj.portId = message.portId;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.chainsInfo?.length) {
      obj.chainsInfo = message.chainsInfo.map((e) => ChainInfo.toJSON(e));
    }
    if (message.chainsIndexedHeaders?.length) {
      obj.chainsIndexedHeaders = message.chainsIndexedHeaders.map((e) => IndexedHeader.toJSON(e));
    }
    if (message.chainsEpochsInfo?.length) {
      obj.chainsEpochsInfo = message.chainsEpochsInfo.map((e) => EpochChainInfoEntry.toJSON(e));
    }
    if (message.lastSentSegment !== undefined) {
      obj.lastSentSegment = BTCChainSegment.toJSON(message.lastSentSegment);
    }
    if (message.sealedEpochsProofs?.length) {
      obj.sealedEpochsProofs = message.sealedEpochsProofs.map((e) => SealedEpochProofEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.portId = object.portId ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.chainsInfo = object.chainsInfo?.map((e) => ChainInfo.fromPartial(e)) || [];
    message.chainsIndexedHeaders = object.chainsIndexedHeaders?.map((e) => IndexedHeader.fromPartial(e)) || [];
    message.chainsEpochsInfo = object.chainsEpochsInfo?.map((e) => EpochChainInfoEntry.fromPartial(e)) || [];
    message.lastSentSegment = (object.lastSentSegment !== undefined && object.lastSentSegment !== null)
      ? BTCChainSegment.fromPartial(object.lastSentSegment)
      : undefined;
    message.sealedEpochsProofs = object.sealedEpochsProofs?.map((e) => SealedEpochProofEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEpochChainInfoEntry(): EpochChainInfoEntry {
  return { epochNumber: 0, chainInfo: undefined };
}

export const EpochChainInfoEntry: MessageFns<EpochChainInfoEntry> = {
  encode(message: EpochChainInfoEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    if (message.chainInfo !== undefined) {
      ChainInfoWithProof.encode(message.chainInfo, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EpochChainInfoEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEpochChainInfoEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chainInfo = ChainInfoWithProof.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EpochChainInfoEntry {
    return {
      epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0,
      chainInfo: isSet(object.chainInfo) ? ChainInfoWithProof.fromJSON(object.chainInfo) : undefined,
    };
  },

  toJSON(message: EpochChainInfoEntry): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.chainInfo !== undefined) {
      obj.chainInfo = ChainInfoWithProof.toJSON(message.chainInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EpochChainInfoEntry>, I>>(base?: I): EpochChainInfoEntry {
    return EpochChainInfoEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EpochChainInfoEntry>, I>>(object: I): EpochChainInfoEntry {
    const message = createBaseEpochChainInfoEntry();
    message.epochNumber = object.epochNumber ?? 0;
    message.chainInfo = (object.chainInfo !== undefined && object.chainInfo !== null)
      ? ChainInfoWithProof.fromPartial(object.chainInfo)
      : undefined;
    return message;
  },
};

function createBaseSealedEpochProofEntry(): SealedEpochProofEntry {
  return { epochNumber: 0, proof: undefined };
}

export const SealedEpochProofEntry: MessageFns<SealedEpochProofEntry> = {
  encode(message: SealedEpochProofEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    if (message.proof !== undefined) {
      ProofEpochSealed.encode(message.proof, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SealedEpochProofEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSealedEpochProofEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proof = ProofEpochSealed.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SealedEpochProofEntry {
    return {
      epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0,
      proof: isSet(object.proof) ? ProofEpochSealed.fromJSON(object.proof) : undefined,
    };
  },

  toJSON(message: SealedEpochProofEntry): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.proof !== undefined) {
      obj.proof = ProofEpochSealed.toJSON(message.proof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SealedEpochProofEntry>, I>>(base?: I): SealedEpochProofEntry {
    return SealedEpochProofEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SealedEpochProofEntry>, I>>(object: I): SealedEpochProofEntry {
    const message = createBaseSealedEpochProofEntry();
    message.epochNumber = object.epochNumber ?? 0;
    message.proof = (object.proof !== undefined && object.proof !== null)
      ? ProofEpochSealed.fromPartial(object.proof)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/zoneconcierge/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SubmissionKey } from "../../btccheckpoint/v1/btccheckpoint";
import { RawCheckpoint } from "../../checkpointing/v1/checkpoint";
import { Epoch } from "../../epoching/v1/epoching";
import { Params } from "./params";
import { FinalizedChainInfo, ProofFinalizedChainInfo } from "./zoneconcierge";

export const protobufPackage = "babylon.zoneconcierge.v1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/**
 * QueryFinalizedChainsInfoRequest is request type for the
 * Query/FinalizedChainsInfo RPC method.
 */
export interface QueryFinalizedChainsInfoRequest {
  /** consumer_ids is the list of ids of Consumers */
  consumerIds: string[];
  /** prove indicates whether the querier wants to get proofs of this timestamp */
  prove: boolean;
}

/**
 * QueryFinalizedChainsInfoResponse is response type for the
 * Query/FinalizedChainsInfo RPC method.
 */
export interface QueryFinalizedChainsInfoResponse {
  finalizedChainsInfo: FinalizedChainInfo[];
}

/**
 * QueryFinalizedChainInfoUntilHeightRequest is request type for the
 * Query/FinalizedChainInfoUntilHeight RPC method.
 */
export interface QueryFinalizedChainInfoUntilHeightRequest {
  /** consumer_id is the ID of the Consumer */
  consumerId: string;
  /**
   * height is the height of the Consumer chain
   * such that the returned finalised chain info will be no later than this
   * height
   */
  height: number;
  /** prove indicates whether the querier wants to get proofs of this timestamp */
  prove: boolean;
}

/**
 * QueryFinalizedChainInfoUntilHeightResponse is response type for the
 * Query/FinalizedChainInfoUntilHeight RPC method.
 */
export interface QueryFinalizedChainInfoUntilHeightResponse {
  /** epoch_info is the metadata of the last BTC-finalised epoch */
  epochInfo:
    | Epoch
    | undefined;
  /** raw_checkpoint is the raw checkpoint of this epoch */
  rawCheckpoint:
    | RawCheckpoint
    | undefined;
  /**
   * btc_submission_key is position of two BTC txs that include the raw
   * checkpoint of this epoch
   */
  btcSubmissionKey:
    | SubmissionKey
    | undefined;
  /** proof is the proof that the chain info is finalized */
  proof: ProofFinalizedChainInfo | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryFinalizedChainsInfoRequest(): QueryFinalizedChainsInfoRequest {
  return { consumerIds: [], prove: false };
}

export const QueryFinalizedChainsInfoRequest: MessageFns<QueryFinalizedChainsInfoRequest> = {
  encode(message: QueryFinalizedChainsInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.consumerIds) {
      writer.uint32(10).string(v!);
    }
    if (message.prove !== false) {
      writer.uint32(16).bool(message.prove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalizedChainsInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalizedChainsInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.prove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalizedChainsInfoRequest {
    return {
      consumerIds: globalThis.Array.isArray(object?.consumerIds)
        ? object.consumerIds.map((e: any) => globalThis.String(e))
        : [],
      prove: isSet(object.prove) ? globalThis.Boolean(object.prove) : false,
    };
  },

  toJSON(message: QueryFinalizedChainsInfoRequest): unknown {
    const obj: any = {};
    if (message.consumerIds?.length) {
      obj.consumerIds = message.consumerIds;
    }
    if (message.prove !== false) {
      obj.prove = message.prove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalizedChainsInfoRequest>, I>>(base?: I): QueryFinalizedChainsInfoRequest {
    return QueryFinalizedChainsInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalizedChainsInfoRequest>, I>>(
    object: I,
  ): QueryFinalizedChainsInfoRequest {
    const message = createBaseQueryFinalizedChainsInfoRequest();
    message.consumerIds = object.consumerIds?.map((e) => e) || [];
    message.prove = object.prove ?? false;
    return message;
  },
};

function createBaseQueryFinalizedChainsInfoResponse(): QueryFinalizedChainsInfoResponse {
  return { finalizedChainsInfo: [] };
}

export const QueryFinalizedChainsInfoResponse: MessageFns<QueryFinalizedChainsInfoResponse> = {
  encode(message: QueryFinalizedChainsInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.finalizedChainsInfo) {
      FinalizedChainInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalizedChainsInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalizedChainsInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalizedChainsInfo.push(FinalizedChainInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalizedChainsInfoResponse {
    return {
      finalizedChainsInfo: globalThis.Array.isArray(object?.finalizedChainsInfo)
        ? object.finalizedChainsInfo.map((e: any) => FinalizedChainInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryFinalizedChainsInfoResponse): unknown {
    const obj: any = {};
    if (message.finalizedChainsInfo?.length) {
      obj.finalizedChainsInfo = message.finalizedChainsInfo.map((e) => FinalizedChainInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalizedChainsInfoResponse>, I>>(
    base?: I,
  ): QueryFinalizedChainsInfoResponse {
    return QueryFinalizedChainsInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalizedChainsInfoResponse>, I>>(
    object: I,
  ): QueryFinalizedChainsInfoResponse {
    const message = createBaseQueryFinalizedChainsInfoResponse();
    message.finalizedChainsInfo = object.finalizedChainsInfo?.map((e) => FinalizedChainInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryFinalizedChainInfoUntilHeightRequest(): QueryFinalizedChainInfoUntilHeightRequest {
  return { consumerId: "", height: 0, prove: false };
}

export const QueryFinalizedChainInfoUntilHeightRequest: MessageFns<QueryFinalizedChainInfoUntilHeightRequest> = {
  encode(message: QueryFinalizedChainInfoUntilHeightRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consumerId !== "") {
      writer.uint32(10).string(message.consumerId);
    }
    if (message.height !== 0) {
      writer.uint32(16).uint64(message.height);
    }
    if (message.prove !== false) {
      writer.uint32(24).bool(message.prove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalizedChainInfoUntilHeightRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalizedChainInfoUntilHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consumerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.prove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalizedChainInfoUntilHeightRequest {
    return {
      consumerId: isSet(object.consumerId) ? globalThis.String(object.consumerId) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      prove: isSet(object.prove) ? globalThis.Boolean(object.prove) : false,
    };
  },

  toJSON(message: QueryFinalizedChainInfoUntilHeightRequest): unknown {
    const obj: any = {};
    if (message.consumerId !== "") {
      obj.consumerId = message.consumerId;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.prove !== false) {
      obj.prove = message.prove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalizedChainInfoUntilHeightRequest>, I>>(
    base?: I,
  ): QueryFinalizedChainInfoUntilHeightRequest {
    return QueryFinalizedChainInfoUntilHeightRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalizedChainInfoUntilHeightRequest>, I>>(
    object: I,
  ): QueryFinalizedChainInfoUntilHeightRequest {
    const message = createBaseQueryFinalizedChainInfoUntilHeightRequest();
    message.consumerId = object.consumerId ?? "";
    message.height = object.height ?? 0;
    message.prove = object.prove ?? false;
    return message;
  },
};

function createBaseQueryFinalizedChainInfoUntilHeightResponse(): QueryFinalizedChainInfoUntilHeightResponse {
  return { epochInfo: undefined, rawCheckpoint: undefined, btcSubmissionKey: undefined, proof: undefined };
}

export const QueryFinalizedChainInfoUntilHeightResponse: MessageFns<QueryFinalizedChainInfoUntilHeightResponse> = {
  encode(message: QueryFinalizedChainInfoUntilHeightResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochInfo !== undefined) {
      Epoch.encode(message.epochInfo, writer.uint32(10).fork()).join();
    }
    if (message.rawCheckpoint !== undefined) {
      RawCheckpoint.encode(message.rawCheckpoint, writer.uint32(18).fork()).join();
    }
    if (message.btcSubmissionKey !== undefined) {
      SubmissionKey.encode(message.btcSubmissionKey, writer.uint32(26).fork()).join();
    }
    if (message.proof !== undefined) {
      ProofFinalizedChainInfo.encode(message.proof, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryFinalizedChainInfoUntilHeightResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryFinalizedChainInfoUntilHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.epochInfo = Epoch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rawCheckpoint = RawCheckpoint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.btcSubmissionKey = SubmissionKey.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proof = ProofFinalizedChainInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryFinalizedChainInfoUntilHeightResponse {
    return {
      epochInfo: isSet(object.epochInfo) ? Epoch.fromJSON(object.epochInfo) : undefined,
      rawCheckpoint: isSet(object.rawCheckpoint) ? RawCheckpoint.fromJSON(object.rawCheckpoint) : undefined,
      btcSubmissionKey: isSet(object.btcSubmissionKey) ? SubmissionKey.fromJSON(object.btcSubmissionKey) : undefined,
      proof: isSet(object.proof) ? ProofFinalizedChainInfo.fromJSON(object.proof) : undefined,
    };
  },

  toJSON(message: QueryFinalizedChainInfoUntilHeightResponse): unknown {
    const obj: any = {};
    if (message.epochInfo !== undefined) {
      obj.epochInfo = Epoch.toJSON(message.epochInfo);
    }
    if (message.rawCheckpoint !== undefined) {
      obj.rawCheckpoint = RawCheckpoint.toJSON(message.rawCheckpoint);
    }
    if (message.btcSubmissionKey !== undefined) {
      obj.btcSubmissionKey = SubmissionKey.toJSON(message.btcSubmissionKey);
    }
    if (message.proof !== undefined) {
      obj.proof = ProofFinalizedChainInfo.toJSON(message.proof);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryFinalizedChainInfoUntilHeightResponse>, I>>(
    base?: I,
  ): QueryFinalizedChainInfoUntilHeightResponse {
    return QueryFinalizedChainInfoUntilHeightResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryFinalizedChainInfoUntilHeightResponse>, I>>(
    object: I,
  ): QueryFinalizedChainInfoUntilHeightResponse {
    const message = createBaseQueryFinalizedChainInfoUntilHeightResponse();
    message.epochInfo = (object.epochInfo !== undefined && object.epochInfo !== null)
      ? Epoch.fromPartial(object.epochInfo)
      : undefined;
    message.rawCheckpoint = (object.rawCheckpoint !== undefined && object.rawCheckpoint !== null)
      ? RawCheckpoint.fromPartial(object.rawCheckpoint)
      : undefined;
    message.btcSubmissionKey = (object.btcSubmissionKey !== undefined && object.btcSubmissionKey !== null)
      ? SubmissionKey.fromPartial(object.btcSubmissionKey)
      : undefined;
    message.proof = (object.proof !== undefined && object.proof !== null)
      ? ProofFinalizedChainInfo.fromPartial(object.proof)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Params queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** FinalizedChainsInfo queries the BTC-finalised info of chains with given IDs, with proofs */
  FinalizedChainsInfo(request: QueryFinalizedChainsInfoRequest): Promise<QueryFinalizedChainsInfoResponse>;
  /**
   * FinalizedChainInfoUntilHeight queries the BTC-finalised info no later than
   * the provided Consumer height, with proofs
   */
  FinalizedChainInfoUntilHeight(
    request: QueryFinalizedChainInfoUntilHeightRequest,
  ): Promise<QueryFinalizedChainInfoUntilHeightResponse>;
}

export const QueryServiceName = "babylon.zoneconcierge.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.FinalizedChainsInfo = this.FinalizedChainsInfo.bind(this);
    this.FinalizedChainInfoUntilHeight = this.FinalizedChainInfoUntilHeight.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  FinalizedChainsInfo(request: QueryFinalizedChainsInfoRequest): Promise<QueryFinalizedChainsInfoResponse> {
    const data = QueryFinalizedChainsInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalizedChainsInfo", data);
    return promise.then((data) => QueryFinalizedChainsInfoResponse.decode(new BinaryReader(data)));
  }

  FinalizedChainInfoUntilHeight(
    request: QueryFinalizedChainInfoUntilHeightRequest,
  ): Promise<QueryFinalizedChainInfoUntilHeightResponse> {
    const data = QueryFinalizedChainInfoUntilHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FinalizedChainInfoUntilHeight", data);
    return promise.then((data) => QueryFinalizedChainInfoUntilHeightResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

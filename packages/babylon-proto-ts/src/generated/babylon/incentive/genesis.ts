// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/incentive/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EventsPowerUpdateAtHeight } from "./events";
import { Gauge, RewardGauge } from "./incentive";
import { Params } from "./params";
import {
  BTCDelegationRewardsTracker,
  FinalityProviderCurrentRewards,
  FinalityProviderHistoricalRewards,
} from "./rewards";

export const protobufPackage = "babylon.incentive";

/** StakeholderType represents the different types of stakeholders. */
export enum StakeholderType {
  /** FINALITY_PROVIDER - Finality provider stakeholder type */
  FINALITY_PROVIDER = 0,
  /** BTC_STAKER - BTC staker stakeholder type */
  BTC_STAKER = 1,
  UNRECOGNIZED = -1,
}

export function stakeholderTypeFromJSON(object: any): StakeholderType {
  switch (object) {
    case 0:
    case "FINALITY_PROVIDER":
      return StakeholderType.FINALITY_PROVIDER;
    case 1:
    case "BTC_STAKER":
      return StakeholderType.BTC_STAKER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StakeholderType.UNRECOGNIZED;
  }
}

export function stakeholderTypeToJSON(object: StakeholderType): string {
  switch (object) {
    case StakeholderType.FINALITY_PROVIDER:
      return "FINALITY_PROVIDER";
    case StakeholderType.BTC_STAKER:
      return "BTC_STAKER";
    case StakeholderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** GenesisState defines the incentive module's genesis state. */
export interface GenesisState {
  /** params the current params of the state. */
  params:
    | Params
    | undefined;
  /** BTC staking gauge on every height */
  btcStakingGauges: BTCStakingGaugeEntry[];
  /** RewardGauges the reward gauge for each BTC staker and finality provider */
  rewardGauges: RewardGaugeEntry[];
  /** Withdraw addresses of the delegators */
  withdrawAddresses: WithdrawAddressEntry[];
  /** refundable_msg_hashes is the set of hashes of messages that can be refunded */
  refundableMsgHashes: string[];
  /**
   * finality_providers_current_rewards are the current rewards of finality
   * providers by addr
   */
  finalityProvidersCurrentRewards: FinalityProviderCurrentRewardsEntry[];
  /**
   * finality_providers_historical_rewards are the historical rewards of
   * finality providers by addr and period
   */
  finalityProvidersHistoricalRewards: FinalityProviderHistoricalRewardsEntry[];
  /**
   * btc_delegation_rewards_trackers are the btc delegation rewards trackers
   * stored by finality provider and delegator addresses
   */
  btcDelegationRewardsTrackers: BTCDelegationRewardsTrackerEntry[];
  /**
   * btc_delegators_to_fps are all the records of the delegators and the
   * finality providers to which it delegated some BTC
   */
  btcDelegatorsToFps: BTCDelegatorToFpEntry[];
  /**
   * EventRewardTracker stores the events that will be processed at the babylon block height
   * prior to the BTC reward distribution.
   */
  eventRewardTracker: EventsPowerUpdateAtHeightEntry[];
  /**
   * LastProcessedHeightEventRewardTracker is the latest block height in which
   * the reward tracker was processed.
   */
  lastProcessedHeightEventRewardTracker: number;
}

/**
 * BTCStakingGaugeEntry represents a gauge for BTC staking rewards at a specific
 * height.
 */
export interface BTCStakingGaugeEntry {
  /** Block height at which this gauge is set */
  height: number;
  /** The gauge object storing rewards info */
  gauge: Gauge | undefined;
}

/** RewardGaugeEntry represents a reward gauge for a specific stakeholder. */
export interface RewardGaugeEntry {
  /** Type of stakeholder */
  stakeholderType: StakeholderType;
  /** Address of the stakeholder */
  address: string;
  /** The reward gauge object */
  rewardGauge: RewardGauge | undefined;
}

/**
 * WithdrawAddressEntry holds the record of a withdraw address belonging to a
 * delegator address.
 */
export interface WithdrawAddressEntry {
  /** Address of the delegator */
  delegatorAddress: string;
  /** Withdraw address */
  withdrawAddress: string;
}

/**
 * FinalityProviderCurrentRewardsEntry represents a finality provider
 * current rewards.
 */
export interface FinalityProviderCurrentRewardsEntry {
  /** Address of the finality provider */
  address: string;
  /** The finality provider current rewards */
  rewards: FinalityProviderCurrentRewards | undefined;
}

/**
 * FinalityProviderHistoricalRewardsEntry represents a finality provider
 * historical rewards by address and period.
 */
export interface FinalityProviderHistoricalRewardsEntry {
  /** Address of the finality provider */
  address: string;
  /** Period of the historical reward */
  period: number;
  /** The finality provider historical rewards */
  rewards: FinalityProviderHistoricalRewards | undefined;
}

/**
 * BTCDelegationRewardsTrackerEntry represents a BTC delegation
 * tracker entry based on the finality provider address, the delegator address
 * and a BTCDelegationTracker
 */
export interface BTCDelegationRewardsTrackerEntry {
  /** Address of the finality provider */
  finalityProviderAddress: string;
  /** Address of the delegator */
  delegatorAddress: string;
  /** BTC delegation tracking information */
  tracker: BTCDelegationRewardsTracker | undefined;
}

/**
 * BTCDelegatorToFpEntry holds an entry of a delegator
 * and a finality provider to which it delegated
 */
export interface BTCDelegatorToFpEntry {
  /** Address of the delegator */
  delegatorAddress: string;
  /** Address of the finality provider */
  finalityProviderAddress: string;
}

/**
 * EventsPowerUpdateAtHeightEntry holds an entry of an event
 * to be processed at the BTC reward distribution of some babylon block height
 */
export interface EventsPowerUpdateAtHeightEntry {
  /** Height the babylon block height which these events refer to. */
  height: number;
  /** Events holds the events to be processed. */
  events: EventsPowerUpdateAtHeight | undefined;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    btcStakingGauges: [],
    rewardGauges: [],
    withdrawAddresses: [],
    refundableMsgHashes: [],
    finalityProvidersCurrentRewards: [],
    finalityProvidersHistoricalRewards: [],
    btcDelegationRewardsTrackers: [],
    btcDelegatorsToFps: [],
    eventRewardTracker: [],
    lastProcessedHeightEventRewardTracker: 0,
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.btcStakingGauges) {
      BTCStakingGaugeEntry.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.rewardGauges) {
      RewardGaugeEntry.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.withdrawAddresses) {
      WithdrawAddressEntry.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.refundableMsgHashes) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.finalityProvidersCurrentRewards) {
      FinalityProviderCurrentRewardsEntry.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.finalityProvidersHistoricalRewards) {
      FinalityProviderHistoricalRewardsEntry.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.btcDelegationRewardsTrackers) {
      BTCDelegationRewardsTrackerEntry.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.btcDelegatorsToFps) {
      BTCDelegatorToFpEntry.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.eventRewardTracker) {
      EventsPowerUpdateAtHeightEntry.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.lastProcessedHeightEventRewardTracker !== 0) {
      writer.uint32(88).uint64(message.lastProcessedHeightEventRewardTracker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.btcStakingGauges.push(BTCStakingGaugeEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardGauges.push(RewardGaugeEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.withdrawAddresses.push(WithdrawAddressEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.refundableMsgHashes.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.finalityProvidersCurrentRewards.push(
            FinalityProviderCurrentRewardsEntry.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finalityProvidersHistoricalRewards.push(
            FinalityProviderHistoricalRewardsEntry.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.btcDelegationRewardsTrackers.push(BTCDelegationRewardsTrackerEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.btcDelegatorsToFps.push(BTCDelegatorToFpEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.eventRewardTracker.push(EventsPowerUpdateAtHeightEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.lastProcessedHeightEventRewardTracker = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      btcStakingGauges: globalThis.Array.isArray(object?.btcStakingGauges)
        ? object.btcStakingGauges.map((e: any) => BTCStakingGaugeEntry.fromJSON(e))
        : [],
      rewardGauges: globalThis.Array.isArray(object?.rewardGauges)
        ? object.rewardGauges.map((e: any) => RewardGaugeEntry.fromJSON(e))
        : [],
      withdrawAddresses: globalThis.Array.isArray(object?.withdrawAddresses)
        ? object.withdrawAddresses.map((e: any) => WithdrawAddressEntry.fromJSON(e))
        : [],
      refundableMsgHashes: globalThis.Array.isArray(object?.refundableMsgHashes)
        ? object.refundableMsgHashes.map((e: any) => globalThis.String(e))
        : [],
      finalityProvidersCurrentRewards: globalThis.Array.isArray(object?.finalityProvidersCurrentRewards)
        ? object.finalityProvidersCurrentRewards.map((e: any) => FinalityProviderCurrentRewardsEntry.fromJSON(e))
        : [],
      finalityProvidersHistoricalRewards: globalThis.Array.isArray(object?.finalityProvidersHistoricalRewards)
        ? object.finalityProvidersHistoricalRewards.map((e: any) => FinalityProviderHistoricalRewardsEntry.fromJSON(e))
        : [],
      btcDelegationRewardsTrackers: globalThis.Array.isArray(object?.btcDelegationRewardsTrackers)
        ? object.btcDelegationRewardsTrackers.map((e: any) => BTCDelegationRewardsTrackerEntry.fromJSON(e))
        : [],
      btcDelegatorsToFps: globalThis.Array.isArray(object?.btcDelegatorsToFps)
        ? object.btcDelegatorsToFps.map((e: any) => BTCDelegatorToFpEntry.fromJSON(e))
        : [],
      eventRewardTracker: globalThis.Array.isArray(object?.eventRewardTracker)
        ? object.eventRewardTracker.map((e: any) => EventsPowerUpdateAtHeightEntry.fromJSON(e))
        : [],
      lastProcessedHeightEventRewardTracker: isSet(object.lastProcessedHeightEventRewardTracker)
        ? globalThis.Number(object.lastProcessedHeightEventRewardTracker)
        : 0,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.btcStakingGauges?.length) {
      obj.btcStakingGauges = message.btcStakingGauges.map((e) => BTCStakingGaugeEntry.toJSON(e));
    }
    if (message.rewardGauges?.length) {
      obj.rewardGauges = message.rewardGauges.map((e) => RewardGaugeEntry.toJSON(e));
    }
    if (message.withdrawAddresses?.length) {
      obj.withdrawAddresses = message.withdrawAddresses.map((e) => WithdrawAddressEntry.toJSON(e));
    }
    if (message.refundableMsgHashes?.length) {
      obj.refundableMsgHashes = message.refundableMsgHashes;
    }
    if (message.finalityProvidersCurrentRewards?.length) {
      obj.finalityProvidersCurrentRewards = message.finalityProvidersCurrentRewards.map((e) =>
        FinalityProviderCurrentRewardsEntry.toJSON(e)
      );
    }
    if (message.finalityProvidersHistoricalRewards?.length) {
      obj.finalityProvidersHistoricalRewards = message.finalityProvidersHistoricalRewards.map((e) =>
        FinalityProviderHistoricalRewardsEntry.toJSON(e)
      );
    }
    if (message.btcDelegationRewardsTrackers?.length) {
      obj.btcDelegationRewardsTrackers = message.btcDelegationRewardsTrackers.map((e) =>
        BTCDelegationRewardsTrackerEntry.toJSON(e)
      );
    }
    if (message.btcDelegatorsToFps?.length) {
      obj.btcDelegatorsToFps = message.btcDelegatorsToFps.map((e) => BTCDelegatorToFpEntry.toJSON(e));
    }
    if (message.eventRewardTracker?.length) {
      obj.eventRewardTracker = message.eventRewardTracker.map((e) => EventsPowerUpdateAtHeightEntry.toJSON(e));
    }
    if (message.lastProcessedHeightEventRewardTracker !== 0) {
      obj.lastProcessedHeightEventRewardTracker = Math.round(message.lastProcessedHeightEventRewardTracker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.btcStakingGauges = object.btcStakingGauges?.map((e) => BTCStakingGaugeEntry.fromPartial(e)) || [];
    message.rewardGauges = object.rewardGauges?.map((e) => RewardGaugeEntry.fromPartial(e)) || [];
    message.withdrawAddresses = object.withdrawAddresses?.map((e) => WithdrawAddressEntry.fromPartial(e)) || [];
    message.refundableMsgHashes = object.refundableMsgHashes?.map((e) => e) || [];
    message.finalityProvidersCurrentRewards =
      object.finalityProvidersCurrentRewards?.map((e) => FinalityProviderCurrentRewardsEntry.fromPartial(e)) || [];
    message.finalityProvidersHistoricalRewards =
      object.finalityProvidersHistoricalRewards?.map((e) => FinalityProviderHistoricalRewardsEntry.fromPartial(e)) ||
      [];
    message.btcDelegationRewardsTrackers =
      object.btcDelegationRewardsTrackers?.map((e) => BTCDelegationRewardsTrackerEntry.fromPartial(e)) || [];
    message.btcDelegatorsToFps = object.btcDelegatorsToFps?.map((e) => BTCDelegatorToFpEntry.fromPartial(e)) || [];
    message.eventRewardTracker = object.eventRewardTracker?.map((e) => EventsPowerUpdateAtHeightEntry.fromPartial(e)) ||
      [];
    message.lastProcessedHeightEventRewardTracker = object.lastProcessedHeightEventRewardTracker ?? 0;
    return message;
  },
};

function createBaseBTCStakingGaugeEntry(): BTCStakingGaugeEntry {
  return { height: 0, gauge: undefined };
}

export const BTCStakingGaugeEntry: MessageFns<BTCStakingGaugeEntry> = {
  encode(message: BTCStakingGaugeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.gauge !== undefined) {
      Gauge.encode(message.gauge, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCStakingGaugeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCStakingGaugeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gauge = Gauge.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCStakingGaugeEntry {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      gauge: isSet(object.gauge) ? Gauge.fromJSON(object.gauge) : undefined,
    };
  },

  toJSON(message: BTCStakingGaugeEntry): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.gauge !== undefined) {
      obj.gauge = Gauge.toJSON(message.gauge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCStakingGaugeEntry>, I>>(base?: I): BTCStakingGaugeEntry {
    return BTCStakingGaugeEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCStakingGaugeEntry>, I>>(object: I): BTCStakingGaugeEntry {
    const message = createBaseBTCStakingGaugeEntry();
    message.height = object.height ?? 0;
    message.gauge = (object.gauge !== undefined && object.gauge !== null) ? Gauge.fromPartial(object.gauge) : undefined;
    return message;
  },
};

function createBaseRewardGaugeEntry(): RewardGaugeEntry {
  return { stakeholderType: 0, address: "", rewardGauge: undefined };
}

export const RewardGaugeEntry: MessageFns<RewardGaugeEntry> = {
  encode(message: RewardGaugeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stakeholderType !== 0) {
      writer.uint32(8).int32(message.stakeholderType);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.rewardGauge !== undefined) {
      RewardGauge.encode(message.rewardGauge, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardGaugeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardGaugeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.stakeholderType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewardGauge = RewardGauge.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardGaugeEntry {
    return {
      stakeholderType: isSet(object.stakeholderType) ? stakeholderTypeFromJSON(object.stakeholderType) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      rewardGauge: isSet(object.rewardGauge) ? RewardGauge.fromJSON(object.rewardGauge) : undefined,
    };
  },

  toJSON(message: RewardGaugeEntry): unknown {
    const obj: any = {};
    if (message.stakeholderType !== 0) {
      obj.stakeholderType = stakeholderTypeToJSON(message.stakeholderType);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.rewardGauge !== undefined) {
      obj.rewardGauge = RewardGauge.toJSON(message.rewardGauge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardGaugeEntry>, I>>(base?: I): RewardGaugeEntry {
    return RewardGaugeEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardGaugeEntry>, I>>(object: I): RewardGaugeEntry {
    const message = createBaseRewardGaugeEntry();
    message.stakeholderType = object.stakeholderType ?? 0;
    message.address = object.address ?? "";
    message.rewardGauge = (object.rewardGauge !== undefined && object.rewardGauge !== null)
      ? RewardGauge.fromPartial(object.rewardGauge)
      : undefined;
    return message;
  },
};

function createBaseWithdrawAddressEntry(): WithdrawAddressEntry {
  return { delegatorAddress: "", withdrawAddress: "" };
}

export const WithdrawAddressEntry: MessageFns<WithdrawAddressEntry> = {
  encode(message: WithdrawAddressEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.withdrawAddress !== "") {
      writer.uint32(18).string(message.withdrawAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithdrawAddressEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawAddressEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.withdrawAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WithdrawAddressEntry {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
      withdrawAddress: isSet(object.withdrawAddress) ? globalThis.String(object.withdrawAddress) : "",
    };
  },

  toJSON(message: WithdrawAddressEntry): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.withdrawAddress !== "") {
      obj.withdrawAddress = message.withdrawAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WithdrawAddressEntry>, I>>(base?: I): WithdrawAddressEntry {
    return WithdrawAddressEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WithdrawAddressEntry>, I>>(object: I): WithdrawAddressEntry {
    const message = createBaseWithdrawAddressEntry();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.withdrawAddress = object.withdrawAddress ?? "";
    return message;
  },
};

function createBaseFinalityProviderCurrentRewardsEntry(): FinalityProviderCurrentRewardsEntry {
  return { address: "", rewards: undefined };
}

export const FinalityProviderCurrentRewardsEntry: MessageFns<FinalityProviderCurrentRewardsEntry> = {
  encode(message: FinalityProviderCurrentRewardsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.rewards !== undefined) {
      FinalityProviderCurrentRewards.encode(message.rewards, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityProviderCurrentRewardsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityProviderCurrentRewardsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rewards = FinalityProviderCurrentRewards.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityProviderCurrentRewardsEntry {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      rewards: isSet(object.rewards) ? FinalityProviderCurrentRewards.fromJSON(object.rewards) : undefined,
    };
  },

  toJSON(message: FinalityProviderCurrentRewardsEntry): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.rewards !== undefined) {
      obj.rewards = FinalityProviderCurrentRewards.toJSON(message.rewards);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalityProviderCurrentRewardsEntry>, I>>(
    base?: I,
  ): FinalityProviderCurrentRewardsEntry {
    return FinalityProviderCurrentRewardsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalityProviderCurrentRewardsEntry>, I>>(
    object: I,
  ): FinalityProviderCurrentRewardsEntry {
    const message = createBaseFinalityProviderCurrentRewardsEntry();
    message.address = object.address ?? "";
    message.rewards = (object.rewards !== undefined && object.rewards !== null)
      ? FinalityProviderCurrentRewards.fromPartial(object.rewards)
      : undefined;
    return message;
  },
};

function createBaseFinalityProviderHistoricalRewardsEntry(): FinalityProviderHistoricalRewardsEntry {
  return { address: "", period: 0, rewards: undefined };
}

export const FinalityProviderHistoricalRewardsEntry: MessageFns<FinalityProviderHistoricalRewardsEntry> = {
  encode(message: FinalityProviderHistoricalRewardsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    if (message.rewards !== undefined) {
      FinalityProviderHistoricalRewards.encode(message.rewards, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityProviderHistoricalRewardsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityProviderHistoricalRewardsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.period = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rewards = FinalityProviderHistoricalRewards.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityProviderHistoricalRewardsEntry {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      period: isSet(object.period) ? globalThis.Number(object.period) : 0,
      rewards: isSet(object.rewards) ? FinalityProviderHistoricalRewards.fromJSON(object.rewards) : undefined,
    };
  },

  toJSON(message: FinalityProviderHistoricalRewardsEntry): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    if (message.rewards !== undefined) {
      obj.rewards = FinalityProviderHistoricalRewards.toJSON(message.rewards);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalityProviderHistoricalRewardsEntry>, I>>(
    base?: I,
  ): FinalityProviderHistoricalRewardsEntry {
    return FinalityProviderHistoricalRewardsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalityProviderHistoricalRewardsEntry>, I>>(
    object: I,
  ): FinalityProviderHistoricalRewardsEntry {
    const message = createBaseFinalityProviderHistoricalRewardsEntry();
    message.address = object.address ?? "";
    message.period = object.period ?? 0;
    message.rewards = (object.rewards !== undefined && object.rewards !== null)
      ? FinalityProviderHistoricalRewards.fromPartial(object.rewards)
      : undefined;
    return message;
  },
};

function createBaseBTCDelegationRewardsTrackerEntry(): BTCDelegationRewardsTrackerEntry {
  return { finalityProviderAddress: "", delegatorAddress: "", tracker: undefined };
}

export const BTCDelegationRewardsTrackerEntry: MessageFns<BTCDelegationRewardsTrackerEntry> = {
  encode(message: BTCDelegationRewardsTrackerEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalityProviderAddress !== "") {
      writer.uint32(10).string(message.finalityProviderAddress);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    if (message.tracker !== undefined) {
      BTCDelegationRewardsTracker.encode(message.tracker, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCDelegationRewardsTrackerEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCDelegationRewardsTrackerEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalityProviderAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tracker = BTCDelegationRewardsTracker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCDelegationRewardsTrackerEntry {
    return {
      finalityProviderAddress: isSet(object.finalityProviderAddress)
        ? globalThis.String(object.finalityProviderAddress)
        : "",
      delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
      tracker: isSet(object.tracker) ? BTCDelegationRewardsTracker.fromJSON(object.tracker) : undefined,
    };
  },

  toJSON(message: BTCDelegationRewardsTrackerEntry): unknown {
    const obj: any = {};
    if (message.finalityProviderAddress !== "") {
      obj.finalityProviderAddress = message.finalityProviderAddress;
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.tracker !== undefined) {
      obj.tracker = BTCDelegationRewardsTracker.toJSON(message.tracker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCDelegationRewardsTrackerEntry>, I>>(
    base?: I,
  ): BTCDelegationRewardsTrackerEntry {
    return BTCDelegationRewardsTrackerEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCDelegationRewardsTrackerEntry>, I>>(
    object: I,
  ): BTCDelegationRewardsTrackerEntry {
    const message = createBaseBTCDelegationRewardsTrackerEntry();
    message.finalityProviderAddress = object.finalityProviderAddress ?? "";
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.tracker = (object.tracker !== undefined && object.tracker !== null)
      ? BTCDelegationRewardsTracker.fromPartial(object.tracker)
      : undefined;
    return message;
  },
};

function createBaseBTCDelegatorToFpEntry(): BTCDelegatorToFpEntry {
  return { delegatorAddress: "", finalityProviderAddress: "" };
}

export const BTCDelegatorToFpEntry: MessageFns<BTCDelegatorToFpEntry> = {
  encode(message: BTCDelegatorToFpEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.finalityProviderAddress !== "") {
      writer.uint32(18).string(message.finalityProviderAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCDelegatorToFpEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCDelegatorToFpEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.finalityProviderAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCDelegatorToFpEntry {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? globalThis.String(object.delegatorAddress) : "",
      finalityProviderAddress: isSet(object.finalityProviderAddress)
        ? globalThis.String(object.finalityProviderAddress)
        : "",
    };
  },

  toJSON(message: BTCDelegatorToFpEntry): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.finalityProviderAddress !== "") {
      obj.finalityProviderAddress = message.finalityProviderAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCDelegatorToFpEntry>, I>>(base?: I): BTCDelegatorToFpEntry {
    return BTCDelegatorToFpEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCDelegatorToFpEntry>, I>>(object: I): BTCDelegatorToFpEntry {
    const message = createBaseBTCDelegatorToFpEntry();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.finalityProviderAddress = object.finalityProviderAddress ?? "";
    return message;
  },
};

function createBaseEventsPowerUpdateAtHeightEntry(): EventsPowerUpdateAtHeightEntry {
  return { height: 0, events: undefined };
}

export const EventsPowerUpdateAtHeightEntry: MessageFns<EventsPowerUpdateAtHeightEntry> = {
  encode(message: EventsPowerUpdateAtHeightEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    if (message.events !== undefined) {
      EventsPowerUpdateAtHeight.encode(message.events, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventsPowerUpdateAtHeightEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventsPowerUpdateAtHeightEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.events = EventsPowerUpdateAtHeight.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventsPowerUpdateAtHeightEntry {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      events: isSet(object.events) ? EventsPowerUpdateAtHeight.fromJSON(object.events) : undefined,
    };
  },

  toJSON(message: EventsPowerUpdateAtHeightEntry): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.events !== undefined) {
      obj.events = EventsPowerUpdateAtHeight.toJSON(message.events);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventsPowerUpdateAtHeightEntry>, I>>(base?: I): EventsPowerUpdateAtHeightEntry {
    return EventsPowerUpdateAtHeightEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventsPowerUpdateAtHeightEntry>, I>>(
    object: I,
  ): EventsPowerUpdateAtHeightEntry {
    const message = createBaseEventsPowerUpdateAtHeightEntry();
    message.height = object.height ?? 0;
    message.events = (object.events !== undefined && object.events !== null)
      ? EventsPowerUpdateAtHeight.fromPartial(object.events)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

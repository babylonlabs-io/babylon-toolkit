// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/incentive/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.incentive";

/**
 * EventsPowerUpdateAtHeight stores a slice of events happened at
 * some specific block height, indexed by the block height.
 */
export interface EventsPowerUpdateAtHeight {
  events: EventPowerUpdate[];
}

/**
 * EventPowerUpdate is an event that affects voting power distribution
 * of BTC rewards, it is indexed by the babylon block height which
 * they were processed at the finality voting power table.
 */
export interface EventPowerUpdate {
  /** BtcActivated means a BTC delegation becomes active. */
  btcActivated?:
    | EventBTCDelegationActivated
    | undefined;
  /** BtcUnbonded means a BTC delegation becomes unbonded. */
  btcUnbonded?: EventBTCDelegationUnbonded | undefined;
}

/** EventBTCDelegationActivated event that activated a BTC delegation. */
export interface EventBTCDelegationActivated {
  /** FpAddr is the bbn address of the finality provider */
  fpAddr: string;
  /** BtcDelAddr is the bbn address of the BTC delegator */
  btcDelAddr: string;
  /** TotalSat the number of satoshis delegated */
  totalSat: Uint8Array;
}

/** EventBTCDelegationUnbonded event that unbonded a BTC delegation. */
export interface EventBTCDelegationUnbonded {
  /** FpAddr is the bbn address of the finality provider */
  fpAddr: string;
  /** BtcDelAddr is the bbn address of the BTC delegator */
  btcDelAddr: string;
  /** TotalSat the number of satoshis unbonded withdraw */
  totalSat: Uint8Array;
}

function createBaseEventsPowerUpdateAtHeight(): EventsPowerUpdateAtHeight {
  return { events: [] };
}

export const EventsPowerUpdateAtHeight: MessageFns<EventsPowerUpdateAtHeight> = {
  encode(message: EventsPowerUpdateAtHeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      EventPowerUpdate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventsPowerUpdateAtHeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventsPowerUpdateAtHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(EventPowerUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventsPowerUpdateAtHeight {
    return {
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => EventPowerUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EventsPowerUpdateAtHeight): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => EventPowerUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventsPowerUpdateAtHeight>, I>>(base?: I): EventsPowerUpdateAtHeight {
    return EventsPowerUpdateAtHeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventsPowerUpdateAtHeight>, I>>(object: I): EventsPowerUpdateAtHeight {
    const message = createBaseEventsPowerUpdateAtHeight();
    message.events = object.events?.map((e) => EventPowerUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEventPowerUpdate(): EventPowerUpdate {
  return { btcActivated: undefined, btcUnbonded: undefined };
}

export const EventPowerUpdate: MessageFns<EventPowerUpdate> = {
  encode(message: EventPowerUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.btcActivated !== undefined) {
      EventBTCDelegationActivated.encode(message.btcActivated, writer.uint32(10).fork()).join();
    }
    if (message.btcUnbonded !== undefined) {
      EventBTCDelegationUnbonded.encode(message.btcUnbonded, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPowerUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPowerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.btcActivated = EventBTCDelegationActivated.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.btcUnbonded = EventBTCDelegationUnbonded.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPowerUpdate {
    return {
      btcActivated: isSet(object.btcActivated) ? EventBTCDelegationActivated.fromJSON(object.btcActivated) : undefined,
      btcUnbonded: isSet(object.btcUnbonded) ? EventBTCDelegationUnbonded.fromJSON(object.btcUnbonded) : undefined,
    };
  },

  toJSON(message: EventPowerUpdate): unknown {
    const obj: any = {};
    if (message.btcActivated !== undefined) {
      obj.btcActivated = EventBTCDelegationActivated.toJSON(message.btcActivated);
    }
    if (message.btcUnbonded !== undefined) {
      obj.btcUnbonded = EventBTCDelegationUnbonded.toJSON(message.btcUnbonded);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPowerUpdate>, I>>(base?: I): EventPowerUpdate {
    return EventPowerUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPowerUpdate>, I>>(object: I): EventPowerUpdate {
    const message = createBaseEventPowerUpdate();
    message.btcActivated = (object.btcActivated !== undefined && object.btcActivated !== null)
      ? EventBTCDelegationActivated.fromPartial(object.btcActivated)
      : undefined;
    message.btcUnbonded = (object.btcUnbonded !== undefined && object.btcUnbonded !== null)
      ? EventBTCDelegationUnbonded.fromPartial(object.btcUnbonded)
      : undefined;
    return message;
  },
};

function createBaseEventBTCDelegationActivated(): EventBTCDelegationActivated {
  return { fpAddr: "", btcDelAddr: "", totalSat: new Uint8Array(0) };
}

export const EventBTCDelegationActivated: MessageFns<EventBTCDelegationActivated> = {
  encode(message: EventBTCDelegationActivated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fpAddr !== "") {
      writer.uint32(10).string(message.fpAddr);
    }
    if (message.btcDelAddr !== "") {
      writer.uint32(18).string(message.btcDelAddr);
    }
    if (message.totalSat.length !== 0) {
      writer.uint32(26).bytes(message.totalSat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventBTCDelegationActivated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBTCDelegationActivated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fpAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.btcDelAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalSat = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBTCDelegationActivated {
    return {
      fpAddr: isSet(object.fpAddr) ? globalThis.String(object.fpAddr) : "",
      btcDelAddr: isSet(object.btcDelAddr) ? globalThis.String(object.btcDelAddr) : "",
      totalSat: isSet(object.totalSat) ? bytesFromBase64(object.totalSat) : new Uint8Array(0),
    };
  },

  toJSON(message: EventBTCDelegationActivated): unknown {
    const obj: any = {};
    if (message.fpAddr !== "") {
      obj.fpAddr = message.fpAddr;
    }
    if (message.btcDelAddr !== "") {
      obj.btcDelAddr = message.btcDelAddr;
    }
    if (message.totalSat.length !== 0) {
      obj.totalSat = base64FromBytes(message.totalSat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBTCDelegationActivated>, I>>(base?: I): EventBTCDelegationActivated {
    return EventBTCDelegationActivated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBTCDelegationActivated>, I>>(object: I): EventBTCDelegationActivated {
    const message = createBaseEventBTCDelegationActivated();
    message.fpAddr = object.fpAddr ?? "";
    message.btcDelAddr = object.btcDelAddr ?? "";
    message.totalSat = object.totalSat ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventBTCDelegationUnbonded(): EventBTCDelegationUnbonded {
  return { fpAddr: "", btcDelAddr: "", totalSat: new Uint8Array(0) };
}

export const EventBTCDelegationUnbonded: MessageFns<EventBTCDelegationUnbonded> = {
  encode(message: EventBTCDelegationUnbonded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fpAddr !== "") {
      writer.uint32(10).string(message.fpAddr);
    }
    if (message.btcDelAddr !== "") {
      writer.uint32(18).string(message.btcDelAddr);
    }
    if (message.totalSat.length !== 0) {
      writer.uint32(26).bytes(message.totalSat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventBTCDelegationUnbonded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBTCDelegationUnbonded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fpAddr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.btcDelAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalSat = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBTCDelegationUnbonded {
    return {
      fpAddr: isSet(object.fpAddr) ? globalThis.String(object.fpAddr) : "",
      btcDelAddr: isSet(object.btcDelAddr) ? globalThis.String(object.btcDelAddr) : "",
      totalSat: isSet(object.totalSat) ? bytesFromBase64(object.totalSat) : new Uint8Array(0),
    };
  },

  toJSON(message: EventBTCDelegationUnbonded): unknown {
    const obj: any = {};
    if (message.fpAddr !== "") {
      obj.fpAddr = message.fpAddr;
    }
    if (message.btcDelAddr !== "") {
      obj.btcDelAddr = message.btcDelAddr;
    }
    if (message.totalSat.length !== 0) {
      obj.totalSat = base64FromBytes(message.totalSat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBTCDelegationUnbonded>, I>>(base?: I): EventBTCDelegationUnbonded {
    return EventBTCDelegationUnbonded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBTCDelegationUnbonded>, I>>(object: I): EventBTCDelegationUnbonded {
    const message = createBaseEventBTCDelegationUnbonded();
    message.fpAddr = object.fpAddr ?? "";
    message.btcDelAddr = object.btcDelAddr ?? "";
    message.totalSat = object.totalSat ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: babylon/incentive/rewards.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "babylon.incentive";

/**
 * FinalityProviderHistoricalRewards represents the cumulative rewards ratio of the
 * finality provider per sat in that period.
 * The period is ommited here and should be part of the key used to store this structure.
 * Key: Prefix + Finality provider bech32 address + Period.
 */
export interface FinalityProviderHistoricalRewards {
  /**
   * The cumulative rewards of that finality provider per sat until that period
   * This coins will aways increase the value, never be reduced due to keep acumulation
   * and when the cumulative rewards will be used to distribute rewards, 2 periods will
   * be loaded, calculate the difference and multiplied by the total sat amount delegated
   * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
   */
  cumulativeRewardsPerSat: Coin[];
}

/**
 * FinalityProviderCurrentRewards represents the current rewards of the pool of
 * BTC delegations that delegated for this finality provider is entitled to.
 * Note: This rewards are for the BTC delegators that delegated to this FP
 * the FP itself is not the owner or can withdraw this rewards.
 * If a slash event happens with this finality provider, all the delegations need
 * to withdraw to the RewardGauge and the related scrutures should be deleted.
 * Key: Prefix + Finality provider bech32 address.
 */
export interface FinalityProviderCurrentRewards {
  /**
   * CurrentRewards is the current rewards that the finality provider have and it was not
   * yet stored inside the FinalityProviderHistoricalRewards. Once something happens that
   * modifies the amount of satoshis delegated to this finality provider or the delegators
   * starting period (activation, unbonding or btc rewards withdraw)
   * a new period must be created, accumulate this rewards to FinalityProviderHistoricalRewards
   * with a new period and zero out the Current Rewards.
   */
  currentRewards: Coin[];
  /**
   * Period stores the current period that serves as a reference for
   * creating new historical rewards and correlate with BTCDelegationRewardsTracker
   * StartPeriodCumulativeReward.
   */
  period: number;
  /**
   * TotalActiveSat is the total amount of active satoshi delegated
   * to this finality provider.
   */
  totalActiveSat: Uint8Array;
}

/**
 * BTCDelegationRewardsTracker represents the structure that holds information
 * from the last time this BTC delegator withdraw the rewards or modified his
 * active staked amount to one finality provider.
 * The finality provider address is ommitted here but should be part of the
 * key used to store this structure together with the BTC delegator address.
 */
export interface BTCDelegationRewardsTracker {
  /**
   * StartPeriodCumulativeReward the starting period the the BTC delegator
   * made his last withdraw of rewards or modified his active staking amount
   * of satoshis.
   */
  startPeriodCumulativeReward: number;
  /**
   * TotalActiveSat is the total amount of active satoshi delegated
   * to one specific finality provider.
   */
  totalActiveSat: Uint8Array;
}

function createBaseFinalityProviderHistoricalRewards(): FinalityProviderHistoricalRewards {
  return { cumulativeRewardsPerSat: [] };
}

export const FinalityProviderHistoricalRewards: MessageFns<FinalityProviderHistoricalRewards> = {
  encode(message: FinalityProviderHistoricalRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cumulativeRewardsPerSat) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityProviderHistoricalRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityProviderHistoricalRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cumulativeRewardsPerSat.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityProviderHistoricalRewards {
    return {
      cumulativeRewardsPerSat: globalThis.Array.isArray(object?.cumulativeRewardsPerSat)
        ? object.cumulativeRewardsPerSat.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FinalityProviderHistoricalRewards): unknown {
    const obj: any = {};
    if (message.cumulativeRewardsPerSat?.length) {
      obj.cumulativeRewardsPerSat = message.cumulativeRewardsPerSat.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalityProviderHistoricalRewards>, I>>(
    base?: I,
  ): FinalityProviderHistoricalRewards {
    return FinalityProviderHistoricalRewards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalityProviderHistoricalRewards>, I>>(
    object: I,
  ): FinalityProviderHistoricalRewards {
    const message = createBaseFinalityProviderHistoricalRewards();
    message.cumulativeRewardsPerSat = object.cumulativeRewardsPerSat?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFinalityProviderCurrentRewards(): FinalityProviderCurrentRewards {
  return { currentRewards: [], period: 0, totalActiveSat: new Uint8Array(0) };
}

export const FinalityProviderCurrentRewards: MessageFns<FinalityProviderCurrentRewards> = {
  encode(message: FinalityProviderCurrentRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.currentRewards) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    if (message.totalActiveSat.length !== 0) {
      writer.uint32(26).bytes(message.totalActiveSat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityProviderCurrentRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityProviderCurrentRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentRewards.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.period = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalActiveSat = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityProviderCurrentRewards {
    return {
      currentRewards: globalThis.Array.isArray(object?.currentRewards)
        ? object.currentRewards.map((e: any) => Coin.fromJSON(e))
        : [],
      period: isSet(object.period) ? globalThis.Number(object.period) : 0,
      totalActiveSat: isSet(object.totalActiveSat) ? bytesFromBase64(object.totalActiveSat) : new Uint8Array(0),
    };
  },

  toJSON(message: FinalityProviderCurrentRewards): unknown {
    const obj: any = {};
    if (message.currentRewards?.length) {
      obj.currentRewards = message.currentRewards.map((e) => Coin.toJSON(e));
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    if (message.totalActiveSat.length !== 0) {
      obj.totalActiveSat = base64FromBytes(message.totalActiveSat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FinalityProviderCurrentRewards>, I>>(base?: I): FinalityProviderCurrentRewards {
    return FinalityProviderCurrentRewards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FinalityProviderCurrentRewards>, I>>(
    object: I,
  ): FinalityProviderCurrentRewards {
    const message = createBaseFinalityProviderCurrentRewards();
    message.currentRewards = object.currentRewards?.map((e) => Coin.fromPartial(e)) || [];
    message.period = object.period ?? 0;
    message.totalActiveSat = object.totalActiveSat ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBTCDelegationRewardsTracker(): BTCDelegationRewardsTracker {
  return { startPeriodCumulativeReward: 0, totalActiveSat: new Uint8Array(0) };
}

export const BTCDelegationRewardsTracker: MessageFns<BTCDelegationRewardsTracker> = {
  encode(message: BTCDelegationRewardsTracker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startPeriodCumulativeReward !== 0) {
      writer.uint32(8).uint64(message.startPeriodCumulativeReward);
    }
    if (message.totalActiveSat.length !== 0) {
      writer.uint32(18).bytes(message.totalActiveSat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCDelegationRewardsTracker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCDelegationRewardsTracker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.startPeriodCumulativeReward = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalActiveSat = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCDelegationRewardsTracker {
    return {
      startPeriodCumulativeReward: isSet(object.startPeriodCumulativeReward)
        ? globalThis.Number(object.startPeriodCumulativeReward)
        : 0,
      totalActiveSat: isSet(object.totalActiveSat) ? bytesFromBase64(object.totalActiveSat) : new Uint8Array(0),
    };
  },

  toJSON(message: BTCDelegationRewardsTracker): unknown {
    const obj: any = {};
    if (message.startPeriodCumulativeReward !== 0) {
      obj.startPeriodCumulativeReward = Math.round(message.startPeriodCumulativeReward);
    }
    if (message.totalActiveSat.length !== 0) {
      obj.totalActiveSat = base64FromBytes(message.totalActiveSat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCDelegationRewardsTracker>, I>>(base?: I): BTCDelegationRewardsTracker {
    return BTCDelegationRewardsTracker.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCDelegationRewardsTracker>, I>>(object: I): BTCDelegationRewardsTracker {
    const message = createBaseBTCDelegationRewardsTracker();
    message.startPeriodCumulativeReward = object.startPeriodCumulativeReward ?? 0;
    message.totalActiveSat = object.totalActiveSat ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: babylon/checkpointing/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PubKey } from "../../../cosmos/crypto/ed25519/keys";
import { BlsKey, ValidatorWithBlsKeySet } from "./bls_key";
import { RawCheckpointWithMeta } from "./checkpoint";

export const protobufPackage = "babylon.checkpointing.v1";

/** GenesisState defines the checkpointing module's genesis state. */
export interface GenesisState {
  /** genesis_keys defines the public keys for the genesis validators */
  genesisKeys: GenesisKey[];
  /** validator sets per epoch */
  validatorSets: ValidatorSetEntry[];
  /** checkpoints are all the raw checkpoints with meta */
  checkpoints: RawCheckpointWithMeta[];
  /** last finalized epoch */
  lastFinalizedEpoch: number;
}

/** GenesisKey defines public key information about the genesis validators */
export interface GenesisKey {
  /** validator_address is the address corresponding to a validator */
  validatorAddress: string;
  /** bls_key defines the BLS key of the validator at genesis */
  blsKey:
    | BlsKey
    | undefined;
  /** val_pubkey defines the ed25519 public key of the validator at genesis */
  valPubkey: PubKey | undefined;
}

/**
 * ValidatorSetEntry defines the validator set
 * for a specific epoch
 */
export interface ValidatorSetEntry {
  /** epoch number */
  epochNumber: number;
  /** validator set corresponding to the epoch number */
  validatorSet: ValidatorWithBlsKeySet | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { genesisKeys: [], validatorSets: [], checkpoints: [], lastFinalizedEpoch: 0 };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.genesisKeys) {
      GenesisKey.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.validatorSets) {
      ValidatorSetEntry.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.checkpoints) {
      RawCheckpointWithMeta.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.lastFinalizedEpoch !== 0) {
      writer.uint32(32).uint64(message.lastFinalizedEpoch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.genesisKeys.push(GenesisKey.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorSets.push(ValidatorSetEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.checkpoints.push(RawCheckpointWithMeta.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastFinalizedEpoch = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      genesisKeys: globalThis.Array.isArray(object?.genesisKeys)
        ? object.genesisKeys.map((e: any) => GenesisKey.fromJSON(e))
        : [],
      validatorSets: globalThis.Array.isArray(object?.validatorSets)
        ? object.validatorSets.map((e: any) => ValidatorSetEntry.fromJSON(e))
        : [],
      checkpoints: globalThis.Array.isArray(object?.checkpoints)
        ? object.checkpoints.map((e: any) => RawCheckpointWithMeta.fromJSON(e))
        : [],
      lastFinalizedEpoch: isSet(object.lastFinalizedEpoch) ? globalThis.Number(object.lastFinalizedEpoch) : 0,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.genesisKeys?.length) {
      obj.genesisKeys = message.genesisKeys.map((e) => GenesisKey.toJSON(e));
    }
    if (message.validatorSets?.length) {
      obj.validatorSets = message.validatorSets.map((e) => ValidatorSetEntry.toJSON(e));
    }
    if (message.checkpoints?.length) {
      obj.checkpoints = message.checkpoints.map((e) => RawCheckpointWithMeta.toJSON(e));
    }
    if (message.lastFinalizedEpoch !== 0) {
      obj.lastFinalizedEpoch = Math.round(message.lastFinalizedEpoch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.genesisKeys = object.genesisKeys?.map((e) => GenesisKey.fromPartial(e)) || [];
    message.validatorSets = object.validatorSets?.map((e) => ValidatorSetEntry.fromPartial(e)) || [];
    message.checkpoints = object.checkpoints?.map((e) => RawCheckpointWithMeta.fromPartial(e)) || [];
    message.lastFinalizedEpoch = object.lastFinalizedEpoch ?? 0;
    return message;
  },
};

function createBaseGenesisKey(): GenesisKey {
  return { validatorAddress: "", blsKey: undefined, valPubkey: undefined };
}

export const GenesisKey: MessageFns<GenesisKey> = {
  encode(message: GenesisKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    if (message.blsKey !== undefined) {
      BlsKey.encode(message.blsKey, writer.uint32(18).fork()).join();
    }
    if (message.valPubkey !== undefined) {
      PubKey.encode(message.valPubkey, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blsKey = BlsKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.valPubkey = PubKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisKey {
    return {
      validatorAddress: isSet(object.validatorAddress) ? globalThis.String(object.validatorAddress) : "",
      blsKey: isSet(object.blsKey) ? BlsKey.fromJSON(object.blsKey) : undefined,
      valPubkey: isSet(object.valPubkey) ? PubKey.fromJSON(object.valPubkey) : undefined,
    };
  },

  toJSON(message: GenesisKey): unknown {
    const obj: any = {};
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.blsKey !== undefined) {
      obj.blsKey = BlsKey.toJSON(message.blsKey);
    }
    if (message.valPubkey !== undefined) {
      obj.valPubkey = PubKey.toJSON(message.valPubkey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisKey>, I>>(base?: I): GenesisKey {
    return GenesisKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisKey>, I>>(object: I): GenesisKey {
    const message = createBaseGenesisKey();
    message.validatorAddress = object.validatorAddress ?? "";
    message.blsKey = (object.blsKey !== undefined && object.blsKey !== null)
      ? BlsKey.fromPartial(object.blsKey)
      : undefined;
    message.valPubkey = (object.valPubkey !== undefined && object.valPubkey !== null)
      ? PubKey.fromPartial(object.valPubkey)
      : undefined;
    return message;
  },
};

function createBaseValidatorSetEntry(): ValidatorSetEntry {
  return { epochNumber: 0, validatorSet: undefined };
}

export const ValidatorSetEntry: MessageFns<ValidatorSetEntry> = {
  encode(message: ValidatorSetEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    if (message.validatorSet !== undefined) {
      ValidatorWithBlsKeySet.encode(message.validatorSet, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorSetEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorSetEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validatorSet = ValidatorWithBlsKeySet.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorSetEntry {
    return {
      epochNumber: isSet(object.epochNumber) ? globalThis.Number(object.epochNumber) : 0,
      validatorSet: isSet(object.validatorSet) ? ValidatorWithBlsKeySet.fromJSON(object.validatorSet) : undefined,
    };
  },

  toJSON(message: ValidatorSetEntry): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.validatorSet !== undefined) {
      obj.validatorSet = ValidatorWithBlsKeySet.toJSON(message.validatorSet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorSetEntry>, I>>(base?: I): ValidatorSetEntry {
    return ValidatorSetEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorSetEntry>, I>>(object: I): ValidatorSetEntry {
    const message = createBaseValidatorSetEntry();
    message.epochNumber = object.epochNumber ?? 0;
    message.validatorSet = (object.validatorSet !== undefined && object.validatorSet !== null)
      ? ValidatorWithBlsKeySet.fromPartial(object.validatorSet)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

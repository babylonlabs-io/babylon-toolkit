/**
 * Transaction builder for peg-in transactions.
 *
 * This module creates a funded transaction from an unfunded transaction template
 * generated by WASM, by adding inputs and change outputs.
 */

import * as bitcoin from "bitcoinjs-lib";
import type { UTXO } from "../utxo/selectUtxos";
import { parseUnfundedWasmTransaction } from "./parseUnfundedWasmTransaction";

export interface PeginTransactionParams {
  /** Unfunded transaction hex from WASM (0 inputs, 1 output) */
  unfundedTxHex: string;
  /** Selected UTXOs to use as inputs */
  selectedUTXOs: UTXO[];
  /** Change address (from wallet) */
  changeAddress: string;
  /** Change amount in satoshis */
  changeAmount: bigint;
  /** Bitcoin network */
  network: bitcoin.Network;
}

/**
 * Builds a funded transaction from an unfunded peg-in transaction template.
 *
 * Process:
 * 1. Parse unfunded transaction from WASM to extract vault output and metadata
 * 2. Create new transaction with same version and locktime
 * 3. Add inputs for each selected UTXO
 * 4. Add vault output (at index 0)
 * 5. Add change output if changeAmount > DUST_THRESHOLD
 * 6. Return unsigned transaction hex ready for wallet signing
 *
 * @param params - Transaction building parameters
 * @returns Transaction hex string (unsigned, ready for wallet signing)
 */
export function buildPeginTransaction(params: PeginTransactionParams): string {
  const { unfundedTxHex, selectedUTXOs, changeAddress, changeAmount, network } =
    params;

  // Parse unfunded WASM transaction to extract metadata and vault output
  const parsed = parseUnfundedWasmTransaction(unfundedTxHex);

  // Create a new transaction with the extracted metadata
  const tx = new bitcoin.Transaction();
  tx.version = parsed.version;
  tx.locktime = parsed.locktime;

  // Add inputs from selected UTXOs
  for (const utxo of selectedUTXOs) {
    const txHash = Buffer.from(utxo.txid, "hex").reverse(); // Bitcoin uses reversed byte order
    tx.addInput(txHash, utxo.vout);
  }

  // Add the vault output (must be at index 0)
  tx.addOutput(parsed.vaultScript, parsed.vaultValue);

  // Add change output if above dust threshold
  const DUST_THRESHOLD = 546n;
  if (changeAmount > DUST_THRESHOLD) {
    const changeScript = bitcoin.address.toOutputScript(changeAddress, network);
    tx.addOutput(changeScript, Number(changeAmount));
  }

  // Serialize transaction to hex
  const txHex = tx.toHex();

  // Return transaction hex (unsigned)
  // The wallet will sign this transaction before broadcasting
  return txHex;
}

/**
 * Gets the network object from network string.
 *
 * @param networkStr - Network string ("mainnet", "testnet", "signet", "regtest")
 * @returns bitcoinjs-lib Network object
 */
export function getNetwork(networkStr: string): bitcoin.Network {
  switch (networkStr.toLowerCase()) {
    case "mainnet":
    case "bitcoin":
      return bitcoin.networks.bitcoin;
    case "testnet":
      return bitcoin.networks.testnet;
    case "signet":
    case "regtest":
      // bitcoinjs-lib doesn't have built-in signet/regtest, use testnet params
      return bitcoin.networks.testnet;
    default:
      throw new Error(`Unknown network: ${networkStr}`);
  }
}
